{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "tDKX8idbtmkr"
   },
   "source": [
    "# Assigment 1 - INSY 695 - Michael Church Carson (260683849)\n",
    "\n",
    "## Introduction to use case:\n",
    "Body Mass Index (BMI) is a common indicator of an individual's body composition. For instance, it is commonly used to classify individuals as under or over weight. BMI is a function of weight and height, but it is also correlated with other health indicators, such as one's age or blood sugar level. Consequently, in this notebook, an end-to-end machine learning process will be used to predict an idividual's BMI based on their other health statistics. \n",
    "\n",
    "Predicting BMI is useful because it allows individaul's and healthcare providers to estmate how BMI will change when other factors are adjusted. For instance, a healthcare provider could increase a patient's age by 10 years to show them where their BMI is expected to be in the future, holding their other health statistics constant.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wtFG9LJ7tmk5"
   },
   "source": [
    "# Setup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NF6qvdAatmk7"
   },
   "source": [
    "First, let's import a few common modules, ensure MatplotLib plots figures inline and prepare a function to save the figures. We also check that Python 3.5 or later is installed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "cwUUXybwtmk8"
   },
   "outputs": [],
   "source": [
    "# Python ≥3.5 is required\n",
    "import sys\n",
    "assert sys.version_info >= (3, 5)\n",
    "\n",
    "# Scikit-Learn ≥0.20 is required\n",
    "import sklearn\n",
    "assert sklearn.__version__ >= \"0.20\"\n",
    "\n",
    "# Common imports\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "# To plot pretty figures\n",
    "%matplotlib inline\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "mpl.rc('axes', labelsize=14)\n",
    "mpl.rc('xtick', labelsize=12)\n",
    "mpl.rc('ytick', labelsize=12)\n",
    "\n",
    "# Where to save the figures\n",
    "PROJECT_ROOT_DIR = \".\"\n",
    "CHAPTER_ID = \"end_to_end_project\"\n",
    "IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\n",
    "os.makedirs(IMAGES_PATH, exist_ok=True)\n",
    "\n",
    "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
    "    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n",
    "    print(\"Saving figure\", fig_id)\n",
    "    if tight_layout:\n",
    "        plt.tight_layout()\n",
    "    plt.savefig(path, format=fig_extension, dpi=resolution)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-bj6ioqktmlD"
   },
   "source": [
    "# Get the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "--LKBHAhtmlF"
   },
   "source": [
    "## Import the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import dataset with key health indicators (age, glocose level, etc.) on 5110 patients\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "health = pd.read_csv('healthcare_BMI.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HvK-UBimtmlM"
   },
   "source": [
    "## Take a Quick Look at the Data Structure"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "9u1rIVJwtmlM",
    "outputId": "2f851b94-34fd-4c42-a7c7-b174952d1e5c"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>stroke</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>77</td>\n",
       "      <td>Female</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>children</td>\n",
       "      <td>Rural</td>\n",
       "      <td>85.81</td>\n",
       "      <td>18.6</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>84</td>\n",
       "      <td>Male</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>89.17</td>\n",
       "      <td>31.5</td>\n",
       "      <td>never smoked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>91</td>\n",
       "      <td>Female</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>98.53</td>\n",
       "      <td>18.5</td>\n",
       "      <td>never smoked</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>99</td>\n",
       "      <td>Female</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>108.89</td>\n",
       "      <td>52.3</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>129</td>\n",
       "      <td>Female</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>97.55</td>\n",
       "      <td>26.2</td>\n",
       "      <td>never smoked</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    id  gender   age  hypertension  heart_disease  stroke ever_married  \\\n",
       "0   77  Female  13.0             0              0       0           No   \n",
       "1   84    Male  55.0             0              0       0          Yes   \n",
       "2   91  Female  42.0             0              0       0           No   \n",
       "3   99  Female  31.0             0              0       0           No   \n",
       "4  129  Female  24.0             0              0       0           No   \n",
       "\n",
       "  work_type Residence_type  avg_glucose_level   bmi smoking_status  \n",
       "0  children          Rural              85.81  18.6            NaN  \n",
       "1   Private          Urban              89.17  31.5   never smoked  \n",
       "2   Private          Urban              98.53  18.5   never smoked  \n",
       "3   Private          Urban             108.89  52.3            NaN  \n",
       "4   Private          Urban              97.55  26.2   never smoked  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "_ueVdb9MtmlN",
    "outputId": "b0e78757-e026-4fca-a0d8-2e0917925182"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4909 entries, 0 to 4908\n",
      "Data columns (total 12 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   id                 4909 non-null   int64  \n",
      " 1   gender             4909 non-null   object \n",
      " 2   age                4909 non-null   float64\n",
      " 3   hypertension       4909 non-null   int64  \n",
      " 4   heart_disease      4909 non-null   int64  \n",
      " 5   stroke             4909 non-null   int64  \n",
      " 6   ever_married       4909 non-null   object \n",
      " 7   work_type          4909 non-null   object \n",
      " 8   Residence_type     4909 non-null   object \n",
      " 9   avg_glucose_level  4909 non-null   float64\n",
      " 10  bmi                4909 non-null   float64\n",
      " 11  smoking_status     3426 non-null   object \n",
      "dtypes: float64(3), int64(4), object(5)\n",
      "memory usage: 460.3+ KB\n"
     ]
    }
   ],
   "source": [
    "health.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4909 entries, 0 to 4908\n",
      "Data columns (total 12 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   id                 4909 non-null   int64  \n",
      " 1   gender             4909 non-null   object \n",
      " 2   age                4909 non-null   float64\n",
      " 3   hypertension       4909 non-null   int64  \n",
      " 4   heart_disease      4909 non-null   int64  \n",
      " 5   stroke             4909 non-null   int64  \n",
      " 6   ever_married       4909 non-null   object \n",
      " 7   work_type          4909 non-null   object \n",
      " 8   Residence_type     4909 non-null   object \n",
      " 9   avg_glucose_level  4909 non-null   float64\n",
      " 10  bmi                4909 non-null   float64\n",
      " 11  smoking_status     3426 non-null   object \n",
      "dtypes: float64(3), int64(4), object(5)\n",
      "memory usage: 460.3+ KB\n"
     ]
    }
   ],
   "source": [
    "health.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dealing with missing categorical values\n",
    "\n",
    "The smoking status variable has several missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1483"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health['smoking_status'].isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 1483 missing values for the 'smoking_status' categorical value. One approach to deal with these variable is to change them to the most popular class for this categorical variable: 'never smoked'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "never smoked       1852\n",
       "formerly smoked     837\n",
       "smokes              737\n",
       "Name: smoking_status, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health['smoking_status'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37.72662456712161"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(1852/4909)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health['smoking_status'].hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The most frequent class is \"never smoked\", so let's try converting the missing values to \"never smoked\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "health['smoking_status'] = health['smoking_status'].replace(np.nan, 'never smoked')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "never smoked       3335\n",
       "formerly smoked     837\n",
       "smokes              737\n",
       "Name: smoking_status, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health['smoking_status'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "67.93644326746792"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(3335/4909)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health['smoking_status'].hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This appraoch for handeling the missing values was successful, but it has significantly changed the distribution of the smoking status variable. The variable is now 68% 'never smoked', whereas before it was only 38% 'never smoked'. Consequently, a bettter approah is to change the missing values into a new category called \"not_reported' so that we do not bias the data towards the 'never smoked' category."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#re-import the original dataset.\n",
    "\n",
    "health = pd.read_csv('healthcare_BMI.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "health['smoking_status'] = health['smoking_status'].replace(np.nan, 'not_reported')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "never smoked       1852\n",
       "not_reported       1483\n",
       "formerly smoked     837\n",
       "smokes              737\n",
       "Name: smoking_status, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health['smoking_status'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health['smoking_status'].hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As demonstrated by the above histogram, by making the new class \"not_reported\" we preserve the distribution of the three smoking classes and remove the missing values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we drop the 'id' column, which is an individual patient identifier, so that it is not misintrepred as a numberic value when performing ML tasks later. Indexes will be added to the dataframe below, so there will still be a way to identify observations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "health = health.drop(columns=['id'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Average glucose level is not an easily interpretable statistic to a non-medical professional; however, it is an indication of whether or not an individual has diabetes. Therefore, to increase the interpretabilty of the data set we will engineer a new attribute using the 'avg_glucose_level' attribute called 'diabetes_status'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>stroke</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>diabetes_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Female</td>\n",
       "      <td>13.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>children</td>\n",
       "      <td>Rural</td>\n",
       "      <td>85.81</td>\n",
       "      <td>18.6</td>\n",
       "      <td>not_reported</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Male</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>89.17</td>\n",
       "      <td>31.5</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Female</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>98.53</td>\n",
       "      <td>18.5</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Female</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>108.89</td>\n",
       "      <td>52.3</td>\n",
       "      <td>not_reported</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Female</td>\n",
       "      <td>24.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>97.55</td>\n",
       "      <td>26.2</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   gender   age  hypertension  heart_disease  stroke ever_married work_type  \\\n",
       "0  Female  13.0             0              0       0           No  children   \n",
       "1    Male  55.0             0              0       0          Yes   Private   \n",
       "2  Female  42.0             0              0       0           No   Private   \n",
       "3  Female  31.0             0              0       0           No   Private   \n",
       "4  Female  24.0             0              0       0           No   Private   \n",
       "\n",
       "  Residence_type  avg_glucose_level   bmi smoking_status diabetes_status  \n",
       "0          Rural              85.81  18.6   not_reported    non-diabetic  \n",
       "1          Urban              89.17  31.5   never smoked    non-diabetic  \n",
       "2          Urban              98.53  18.5   never smoked    non-diabetic  \n",
       "3          Urban             108.89  52.3   not_reported    non-diabetic  \n",
       "4          Urban              97.55  26.2   never smoked    non-diabetic  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a list of our conditions\n",
    "conditions = [\n",
    "    (health['avg_glucose_level'] >= 200),\n",
    "    (health['avg_glucose_level'] > 140) & (health['avg_glucose_level'] <= 199),\n",
    "    (health['avg_glucose_level'] <= 140)\n",
    "    ]\n",
    "\n",
    "# create a list of the values we want to assign for each condition\n",
    "values = ['diabetic', 'pre-diabetic', 'non-diabetic']\n",
    "\n",
    "# create a new column and use np.select to assign values to it using our lists as arguments\n",
    "health['diabetes_status'] = np.select(conditions, values)\n",
    "\n",
    "# display updated DataFrame\n",
    "health.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pandas_profiling import ProfileReport\n",
    "prof = ProfileReport(health)\n",
    "#prof.to_file(output_file='health_profile_report.html')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Merge low frequency observation:\n",
    "As shown above, there is only one observation where gender is 'other', opposed to female or male. Due to the very low frequency of this 'other' value, it will act something like an outlier if we include it in the dataset. For instance, when we split the data into training and test, if it appears in the test set, it cannot appear in the training set, and our models will produce errors. To prevent us from encountering this issue later, we will tranform this single observation based on the distribution of the other variables. That is, we will change this observation to 'Female', since the majority of the observations are females, opposed to males. (Note: another approach would be to drop this obervation, but since it is only one observation the difference between dropping it or converting it to 'Female' is negligible)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Female    2897\n",
       "Male      2011\n",
       "Other        1\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health['gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "health['gender'] = health['gender'].replace(['Other'],'Female')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Female    2898\n",
       "Male      2011\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health['gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "id": "6GMVieGYtmlO",
    "outputId": "fdf8efbc-87cb-49fc-b764-e3fadb33f61b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28.7    41\n",
       "28.4    38\n",
       "26.1    37\n",
       "27.7    37\n",
       "26.7    37\n",
       "        ..\n",
       "58.1     1\n",
       "49.9     1\n",
       "13.3     1\n",
       "13.4     1\n",
       "61.6     1\n",
       "Name: bmi, Length: 418, dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health[\"bmi\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "id": "k9aUwZkVtmlP",
    "outputId": "d36ba8a6-ae41-4c7b-91c6-7ac3c1b207e2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>stroke</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>4909.000000</td>\n",
       "      <td>4909.000000</td>\n",
       "      <td>4909.000000</td>\n",
       "      <td>4909.000000</td>\n",
       "      <td>4909.000000</td>\n",
       "      <td>4909.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>42.865374</td>\n",
       "      <td>0.091872</td>\n",
       "      <td>0.049501</td>\n",
       "      <td>0.042575</td>\n",
       "      <td>105.305150</td>\n",
       "      <td>28.893237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22.555115</td>\n",
       "      <td>0.288875</td>\n",
       "      <td>0.216934</td>\n",
       "      <td>0.201917</td>\n",
       "      <td>44.424341</td>\n",
       "      <td>7.854067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.080000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>55.120000</td>\n",
       "      <td>10.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>77.070000</td>\n",
       "      <td>23.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>44.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>91.680000</td>\n",
       "      <td>28.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>60.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>113.570000</td>\n",
       "      <td>33.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>82.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>271.740000</td>\n",
       "      <td>97.600000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               age  hypertension  heart_disease       stroke  \\\n",
       "count  4909.000000   4909.000000    4909.000000  4909.000000   \n",
       "mean     42.865374      0.091872       0.049501     0.042575   \n",
       "std      22.555115      0.288875       0.216934     0.201917   \n",
       "min       0.080000      0.000000       0.000000     0.000000   \n",
       "25%      25.000000      0.000000       0.000000     0.000000   \n",
       "50%      44.000000      0.000000       0.000000     0.000000   \n",
       "75%      60.000000      0.000000       0.000000     0.000000   \n",
       "max      82.000000      1.000000       1.000000     1.000000   \n",
       "\n",
       "       avg_glucose_level          bmi  \n",
       "count        4909.000000  4909.000000  \n",
       "mean          105.305150    28.893237  \n",
       "std            44.424341     7.854067  \n",
       "min            55.120000    10.300000  \n",
       "25%            77.070000    23.500000  \n",
       "50%            91.680000    28.100000  \n",
       "75%           113.570000    33.100000  \n",
       "max           271.740000    97.600000  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "id": "8kUBNbwOtmlQ",
    "outputId": "ae002746-5bdb-42d1-c05d-40e6d0863d8a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure attribute_histogram_plots\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1080 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histograms of numberical variables\n",
    "\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "health.hist(bins=50, figsize=(20,15))\n",
    "save_fig(\"attribute_histogram_plots\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "wah2O03CtmlR"
   },
   "source": [
    "## Create a Test Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "id": "j-4CIZxWtmlS"
   },
   "outputs": [],
   "source": [
    "# to make this notebook's output identical at every run\n",
    "np.random.seed(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "id": "2R5Ffyz2tmlS"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# For illustration only. Sklearn has train_test_split()\n",
    "def split_train_test(data, test_ratio):\n",
    "    shuffled_indices = np.random.permutation(len(data))\n",
    "    test_set_size = int(len(data) * test_ratio)\n",
    "    test_indices = shuffled_indices[:test_set_size]\n",
    "    train_indices = shuffled_indices[test_set_size:]\n",
    "    return data.iloc[train_indices], data.iloc[test_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "id": "Vdck7c1XtmlT",
    "outputId": "555280c3-96c7-4539-ad3f-21d0168de7a2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3928"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_set, test_set = split_train_test(health, 0.2)\n",
    "len(train_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "id": "GB9TnRbStmlT",
    "outputId": "ea900390-c222-4b9e-fbf9-b467349265f1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "981"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(test_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "id": "luVE-xTytmlU"
   },
   "outputs": [],
   "source": [
    "from zlib import crc32\n",
    "\n",
    "def test_set_check(identifier, test_ratio):\n",
    "    return crc32(np.int64(identifier)) & 0xffffffff < test_ratio * 2**32\n",
    "\n",
    "def split_train_test_by_id(data, test_ratio, id_column):\n",
    "    ids = data[id_column]\n",
    "    in_test_set = ids.apply(lambda id_: test_set_check(id_, test_ratio))\n",
    "    return data.loc[~in_test_set], data.loc[in_test_set]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "id": "3H4HKlFUtmlW"
   },
   "outputs": [],
   "source": [
    "health_with_id = health.reset_index()   # adds an `index` column\n",
    "train_set, test_set = split_train_test_by_id(health_with_id, 0.2, \"index\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "id": "kzD68s3DtmlW",
    "outputId": "97b53aab-e325-4925-9db5-e39e39c36892"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>stroke</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>diabetes_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>Female</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>98.53</td>\n",
       "      <td>18.5</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>Female</td>\n",
       "      <td>33.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>86.97</td>\n",
       "      <td>42.2</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>Male</td>\n",
       "      <td>31.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>72.60</td>\n",
       "      <td>31.6</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>Female</td>\n",
       "      <td>43.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>110.32</td>\n",
       "      <td>28.4</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>Female</td>\n",
       "      <td>37.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Govt_job</td>\n",
       "      <td>Urban</td>\n",
       "      <td>72.09</td>\n",
       "      <td>24.1</td>\n",
       "      <td>smokes</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index  gender   age  hypertension  heart_disease  stroke ever_married  \\\n",
       "2       2  Female  42.0             0              0       0           No   \n",
       "5       5  Female  33.0             0              0       0          Yes   \n",
       "12     12    Male  31.0             0              0       0           No   \n",
       "16     16  Female  43.0             0              0       0          Yes   \n",
       "23     23  Female  37.0             0              0       0          Yes   \n",
       "\n",
       "   work_type Residence_type  avg_glucose_level   bmi smoking_status  \\\n",
       "2    Private          Urban              98.53  18.5   never smoked   \n",
       "5    Private          Rural              86.97  42.2   never smoked   \n",
       "12   Private          Urban              72.60  31.6   never smoked   \n",
       "16   Private          Rural             110.32  28.4   never smoked   \n",
       "23  Govt_job          Urban              72.09  24.1         smokes   \n",
       "\n",
       "   diabetes_status  \n",
       "2     non-diabetic  \n",
       "5     non-diabetic  \n",
       "12    non-diabetic  \n",
       "16    non-diabetic  \n",
       "23    non-diabetic  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_set.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "id": "GxFASesEtmlX"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_set, test_set = train_test_split(health, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "id": "Hgb10bx_tmlZ",
    "outputId": "07a56b55-23b6-43fb-8541-a841e5a07313"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>stroke</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>diabetes_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4153</th>\n",
       "      <td>Male</td>\n",
       "      <td>34.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>61.11</td>\n",
       "      <td>29.3</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3543</th>\n",
       "      <td>Female</td>\n",
       "      <td>25.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>67.73</td>\n",
       "      <td>22.6</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>907</th>\n",
       "      <td>Male</td>\n",
       "      <td>43.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Govt_job</td>\n",
       "      <td>Rural</td>\n",
       "      <td>88.00</td>\n",
       "      <td>30.6</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2522</th>\n",
       "      <td>Female</td>\n",
       "      <td>65.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>86.33</td>\n",
       "      <td>33.1</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3107</th>\n",
       "      <td>Female</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>children</td>\n",
       "      <td>Urban</td>\n",
       "      <td>139.67</td>\n",
       "      <td>14.1</td>\n",
       "      <td>not_reported</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      gender    age  hypertension  heart_disease  stroke ever_married  \\\n",
       "4153    Male  34.00             0              0       0          Yes   \n",
       "3543  Female  25.00             0              0       0           No   \n",
       "907     Male  43.00             0              0       0          Yes   \n",
       "2522  Female  65.00             0              0       0           No   \n",
       "3107  Female   0.08             0              0       0           No   \n",
       "\n",
       "          work_type Residence_type  avg_glucose_level   bmi smoking_status  \\\n",
       "4153        Private          Urban              61.11  29.3   never smoked   \n",
       "3543        Private          Rural              67.73  22.6   never smoked   \n",
       "907        Govt_job          Rural              88.00  30.6   never smoked   \n",
       "2522  Self-employed          Rural              86.33  33.1   never smoked   \n",
       "3107       children          Urban             139.67  14.1   not_reported   \n",
       "\n",
       "     diabetes_status  \n",
       "4153    non-diabetic  \n",
       "3543    non-diabetic  \n",
       "907     non-diabetic  \n",
       "2522    non-diabetic  \n",
       "3107    non-diabetic  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_set.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "id": "nWpq2BQXtmlc",
    "outputId": "62a2a489-fe86-4c5f-945d-11dfeec3a2d6"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histogram of target variable - Body Mass Index (BMI)\n",
    "health[\"bmi\"].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count        4909\n",
       "unique          5\n",
       "top       Private\n",
       "freq         2811\n",
       "Name: work_type, dtype: object"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health['work_type'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring work type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "id": "SMsLTzP4tmld",
    "outputId": "e9ab1089-5772-405f-e948-658ca3a83c89"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health[\"work_type\"].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "id": "5aCqoRFytmle"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import StratifiedShuffleSplit\n",
    "\n",
    "split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n",
    "for train_index, test_index in split.split(health, health[\"work_type\"]):\n",
    "    strat_train_set = health.loc[train_index]\n",
    "    strat_test_set = health.loc[test_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "id": "-lNxMb85tmle",
    "outputId": "ab282f2a-64b5-47c0-9d6c-7107eb320d6f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Private          0.572301\n",
       "Self-employed    0.157841\n",
       "children         0.136456\n",
       "Govt_job         0.128310\n",
       "Never_worked     0.005092\n",
       "Name: work_type, dtype: float64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "strat_test_set[\"work_type\"].value_counts() / len(strat_test_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "id": "JbP2R1octmlf",
    "outputId": "1cff41d5-cfe0-4f3e-b240-504e0b10db08"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Private          0.572622\n",
       "Self-employed    0.157873\n",
       "children         0.136688\n",
       "Govt_job         0.128336\n",
       "Never_worked     0.004482\n",
       "Name: work_type, dtype: float64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health[\"work_type\"].value_counts() / len(health)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "id": "YvorC1aztmlf"
   },
   "outputs": [],
   "source": [
    "def work_type_proportions(data):\n",
    "    return data[\"work_type\"].value_counts() / len(data)\n",
    "\n",
    "train_set, test_set = train_test_split(health, test_size=0.2, random_state=42)\n",
    "\n",
    "compare_props = pd.DataFrame({\n",
    "    \"Overall\": work_type_proportions(health),\n",
    "    \"Stratified\": work_type_proportions(strat_test_set),\n",
    "    \"Random\": work_type_proportions(test_set),\n",
    "}).sort_index()\n",
    "compare_props[\"Rand. %error\"] = 100 * compare_props[\"Random\"] / compare_props[\"Overall\"] - 100\n",
    "compare_props[\"Strat. %error\"] = 100 * compare_props[\"Stratified\"] / compare_props[\"Overall\"] - 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "id": "EQ1vSeyOtmli",
    "outputId": "8d00c9ea-db9b-4c56-d288-269a4bd7021a"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Overall</th>\n",
       "      <th>Stratified</th>\n",
       "      <th>Random</th>\n",
       "      <th>Rand. %error</th>\n",
       "      <th>Strat. %error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Govt_job</th>\n",
       "      <td>0.128336</td>\n",
       "      <td>0.128310</td>\n",
       "      <td>0.146640</td>\n",
       "      <td>14.262438</td>\n",
       "      <td>-0.020367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Never_worked</th>\n",
       "      <td>0.004482</td>\n",
       "      <td>0.005092</td>\n",
       "      <td>0.003055</td>\n",
       "      <td>-31.832068</td>\n",
       "      <td>13.613220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Private</th>\n",
       "      <td>0.572622</td>\n",
       "      <td>0.572301</td>\n",
       "      <td>0.529532</td>\n",
       "      <td>-7.525063</td>\n",
       "      <td>-0.055934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Self-employed</th>\n",
       "      <td>0.157873</td>\n",
       "      <td>0.157841</td>\n",
       "      <td>0.170061</td>\n",
       "      <td>7.719992</td>\n",
       "      <td>-0.020367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>children</th>\n",
       "      <td>0.136688</td>\n",
       "      <td>0.136456</td>\n",
       "      <td>0.150713</td>\n",
       "      <td>10.260699</td>\n",
       "      <td>-0.169368</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Overall  Stratified    Random  Rand. %error  Strat. %error\n",
       "Govt_job       0.128336    0.128310  0.146640     14.262438      -0.020367\n",
       "Never_worked   0.004482    0.005092  0.003055    -31.832068      13.613220\n",
       "Private        0.572622    0.572301  0.529532     -7.525063      -0.055934\n",
       "Self-employed  0.157873    0.157841  0.170061      7.719992      -0.020367\n",
       "children       0.136688    0.136456  0.150713     10.260699      -0.169368"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "compare_props"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring residence type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health[\"Residence_type\"].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n",
    "for train_index, test_index in split.split(health, health[\"Residence_type\"]):\n",
    "    strat_train_set = health.loc[train_index]\n",
    "    strat_test_set = health.loc[test_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Urban    0.507128\n",
       "Rural    0.492872\n",
       "Name: Residence_type, dtype: float64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "strat_test_set[\"Residence_type\"].value_counts() / len(strat_test_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Urban    0.507232\n",
       "Rural    0.492768\n",
       "Name: Residence_type, dtype: float64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health[\"Residence_type\"].value_counts() / len(health)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "def residence_type_proportions(data):\n",
    "    return data[\"Residence_type\"].value_counts() / len(data)\n",
    "\n",
    "train_set, test_set = train_test_split(health, test_size=0.2, random_state=42)\n",
    "\n",
    "compare_props = pd.DataFrame({\n",
    "    \"Overall\": residence_type_proportions(health),\n",
    "    \"Stratified\": residence_type_proportions(strat_test_set),\n",
    "    \"Random\": residence_type_proportions(test_set),\n",
    "}).sort_index()\n",
    "compare_props[\"Rand. %error\"] = 100 * compare_props[\"Random\"] / compare_props[\"Overall\"] - 100\n",
    "compare_props[\"Strat. %error\"] = 100 * compare_props[\"Stratified\"] / compare_props[\"Overall\"] - 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Overall</th>\n",
       "      <th>Stratified</th>\n",
       "      <th>Random</th>\n",
       "      <th>Rand. %error</th>\n",
       "      <th>Strat. %error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Rural</th>\n",
       "      <td>0.492768</td>\n",
       "      <td>0.492872</td>\n",
       "      <td>0.488798</td>\n",
       "      <td>-0.805655</td>\n",
       "      <td>0.020964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Urban</th>\n",
       "      <td>0.507232</td>\n",
       "      <td>0.507128</td>\n",
       "      <td>0.511202</td>\n",
       "      <td>0.782683</td>\n",
       "      <td>-0.020367</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Overall  Stratified    Random  Rand. %error  Strat. %error\n",
       "Rural  0.492768    0.492872  0.488798     -0.805655       0.020964\n",
       "Urban  0.507232    0.507128  0.511202      0.782683      -0.020367"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "compare_props"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring marital status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health[\"ever_married\"].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n",
    "for train_index, test_index in split.split(health, health[\"ever_married\"]):\n",
    "    strat_train_set = health.loc[train_index]\n",
    "    strat_test_set = health.loc[test_index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Yes    0.652749\n",
       "No     0.347251\n",
       "Name: ever_married, dtype: float64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "strat_test_set[\"ever_married\"].value_counts() / len(strat_test_set)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Yes    0.652679\n",
       "No     0.347321\n",
       "Name: ever_married, dtype: float64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health[\"ever_married\"].value_counts() / len(health)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ever_married_proportions(data):\n",
    "    return data[\"ever_married\"].value_counts() / len(data)\n",
    "\n",
    "train_set, test_set = train_test_split(health, test_size=0.2, random_state=42)\n",
    "\n",
    "compare_props = pd.DataFrame({\n",
    "    \"Overall\": ever_married_proportions(health),\n",
    "    \"Stratified\": ever_married_proportions(strat_test_set),\n",
    "    \"Random\": ever_married_proportions(test_set),\n",
    "}).sort_index()\n",
    "compare_props[\"Rand. %error\"] = 100 * compare_props[\"Random\"] / compare_props[\"Overall\"] - 100\n",
    "compare_props[\"Strat. %error\"] = 100 * compare_props[\"Stratified\"] / compare_props[\"Overall\"] - 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Overall</th>\n",
       "      <th>Stratified</th>\n",
       "      <th>Random</th>\n",
       "      <th>Rand. %error</th>\n",
       "      <th>Strat. %error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>No</th>\n",
       "      <td>0.347321</td>\n",
       "      <td>0.347251</td>\n",
       "      <td>0.366599</td>\n",
       "      <td>5.550346</td>\n",
       "      <td>-0.020367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yes</th>\n",
       "      <td>0.652679</td>\n",
       "      <td>0.652749</td>\n",
       "      <td>0.633401</td>\n",
       "      <td>-2.953602</td>\n",
       "      <td>0.010838</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Overall  Stratified    Random  Rand. %error  Strat. %error\n",
       "No   0.347321    0.347251  0.366599      5.550346      -0.020367\n",
       "Yes  0.652679    0.652749  0.633401     -2.953602       0.010838"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "compare_props"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring Smoking status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Overall</th>\n",
       "      <th>Stratified</th>\n",
       "      <th>Random</th>\n",
       "      <th>Rand. %error</th>\n",
       "      <th>Strat. %error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>formerly smoked</th>\n",
       "      <td>0.170503</td>\n",
       "      <td>0.170061</td>\n",
       "      <td>0.170061</td>\n",
       "      <td>-0.259267</td>\n",
       "      <td>-0.259267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>never smoked</th>\n",
       "      <td>0.377266</td>\n",
       "      <td>0.377800</td>\n",
       "      <td>0.363544</td>\n",
       "      <td>-3.637340</td>\n",
       "      <td>0.141587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>not_reported</th>\n",
       "      <td>0.302098</td>\n",
       "      <td>0.302444</td>\n",
       "      <td>0.318737</td>\n",
       "      <td>5.507840</td>\n",
       "      <td>0.114468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>smokes</th>\n",
       "      <td>0.150132</td>\n",
       "      <td>0.149695</td>\n",
       "      <td>0.147658</td>\n",
       "      <td>-1.648258</td>\n",
       "      <td>-0.291682</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  Overall  Stratified    Random  Rand. %error  Strat. %error\n",
       "formerly smoked  0.170503    0.170061  0.170061     -0.259267      -0.259267\n",
       "never smoked     0.377266    0.377800  0.363544     -3.637340       0.141587\n",
       "not_reported     0.302098    0.302444  0.318737      5.507840       0.114468\n",
       "smokes           0.150132    0.149695  0.147658     -1.648258      -0.291682"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health[\"smoking_status\"].hist()\n",
    "\n",
    "split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n",
    "for train_index, test_index in split.split(health, health[\"smoking_status\"]):\n",
    "    strat_train_set = health.loc[train_index]\n",
    "    strat_test_set = health.loc[test_index]\n",
    "\n",
    "strat_test_set[\"smoking_status\"].value_counts() / len(strat_test_set)\n",
    "\n",
    "health[\"smoking_status\"].value_counts() / len(health)\n",
    "\n",
    "def smoking_status_proportions(data):\n",
    "    return data[\"smoking_status\"].value_counts() / len(data)\n",
    "\n",
    "train_set, test_set = train_test_split(health, test_size=0.2, random_state=42)\n",
    "\n",
    "compare_props = pd.DataFrame({\n",
    "    \"Overall\": smoking_status_proportions(health),\n",
    "    \"Stratified\": smoking_status_proportions(strat_test_set),\n",
    "    \"Random\": smoking_status_proportions(test_set),\n",
    "}).sort_index()\n",
    "compare_props[\"Rand. %error\"] = 100 * compare_props[\"Random\"] / compare_props[\"Overall\"] - 100\n",
    "compare_props[\"Strat. %error\"] = 100 * compare_props[\"Stratified\"] / compare_props[\"Overall\"] - 100\n",
    "\n",
    "compare_props"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring Stroke history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Overall</th>\n",
       "      <th>Stratified</th>\n",
       "      <th>Random</th>\n",
       "      <th>Rand. %error</th>\n",
       "      <th>Strat. %error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.957425</td>\n",
       "      <td>0.95723</td>\n",
       "      <td>0.958248</td>\n",
       "      <td>0.085995</td>\n",
       "      <td>-0.020367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.042575</td>\n",
       "      <td>0.04277</td>\n",
       "      <td>0.041752</td>\n",
       "      <td>-1.933852</td>\n",
       "      <td>0.458005</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Overall  Stratified    Random  Rand. %error  Strat. %error\n",
       "0  0.957425     0.95723  0.958248      0.085995      -0.020367\n",
       "1  0.042575     0.04277  0.041752     -1.933852       0.458005"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health[\"stroke\"].hist()\n",
    "\n",
    "split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n",
    "for train_index, test_index in split.split(health, health[\"stroke\"]):\n",
    "    strat_train_set = health.loc[train_index]\n",
    "    strat_test_set = health.loc[test_index]\n",
    "\n",
    "strat_test_set[\"stroke\"].value_counts() / len(strat_test_set)\n",
    "\n",
    "health[\"stroke\"].value_counts() / len(health)\n",
    "\n",
    "def stroke_proportions(data):\n",
    "    return data[\"stroke\"].value_counts() / len(data)\n",
    "\n",
    "train_set, test_set = train_test_split(health, test_size=0.2, random_state=42)\n",
    "\n",
    "compare_props = pd.DataFrame({\n",
    "    \"Overall\": stroke_proportions(health),\n",
    "    \"Stratified\": stroke_proportions(strat_test_set),\n",
    "    \"Random\": stroke_proportions(test_set),\n",
    "}).sort_index()\n",
    "compare_props[\"Rand. %error\"] = 100 * compare_props[\"Random\"] / compare_props[\"Overall\"] - 100\n",
    "compare_props[\"Strat. %error\"] = 100 * compare_props[\"Stratified\"] / compare_props[\"Overall\"] - 100\n",
    "\n",
    "compare_props"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring hypertension history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Overall</th>\n",
       "      <th>Stratified</th>\n",
       "      <th>Random</th>\n",
       "      <th>Rand. %error</th>\n",
       "      <th>Strat. %error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.908128</td>\n",
       "      <td>0.90835</td>\n",
       "      <td>0.904277</td>\n",
       "      <td>-0.424053</td>\n",
       "      <td>0.024487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.091872</td>\n",
       "      <td>0.09165</td>\n",
       "      <td>0.095723</td>\n",
       "      <td>4.191636</td>\n",
       "      <td>-0.242051</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Overall  Stratified    Random  Rand. %error  Strat. %error\n",
       "0  0.908128     0.90835  0.904277     -0.424053       0.024487\n",
       "1  0.091872     0.09165  0.095723      4.191636      -0.242051"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health[\"hypertension\"].hist()\n",
    "\n",
    "split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n",
    "for train_index, test_index in split.split(health, health[\"hypertension\"]):\n",
    "    strat_train_set = health.loc[train_index]\n",
    "    strat_test_set = health.loc[test_index]\n",
    "\n",
    "strat_test_set[\"hypertension\"].value_counts() / len(strat_test_set)\n",
    "\n",
    "health[\"hypertension\"].value_counts() / len(health)\n",
    "\n",
    "def hypertension_proportions(data):\n",
    "    return data[\"hypertension\"].value_counts() / len(data)\n",
    "\n",
    "train_set, test_set = train_test_split(health, test_size=0.2, random_state=42)\n",
    "\n",
    "compare_props = pd.DataFrame({\n",
    "    \"Overall\": hypertension_proportions(health),\n",
    "    \"Stratified\": hypertension_proportions(strat_test_set),\n",
    "    \"Random\": hypertension_proportions(test_set),\n",
    "}).sort_index()\n",
    "compare_props[\"Rand. %error\"] = 100 * compare_props[\"Random\"] / compare_props[\"Overall\"] - 100\n",
    "compare_props[\"Strat. %error\"] = 100 * compare_props[\"Stratified\"] / compare_props[\"Overall\"] - 100\n",
    "\n",
    "compare_props"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring heart disease history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Overall</th>\n",
       "      <th>Stratified</th>\n",
       "      <th>Random</th>\n",
       "      <th>Rand. %error</th>\n",
       "      <th>Strat. %error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.950499</td>\n",
       "      <td>0.950102</td>\n",
       "      <td>0.94501</td>\n",
       "      <td>-0.577476</td>\n",
       "      <td>-0.041794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.049501</td>\n",
       "      <td>0.049898</td>\n",
       "      <td>0.05499</td>\n",
       "      <td>11.088482</td>\n",
       "      <td>0.802511</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Overall  Stratified   Random  Rand. %error  Strat. %error\n",
       "0  0.950499    0.950102  0.94501     -0.577476      -0.041794\n",
       "1  0.049501    0.049898  0.05499     11.088482       0.802511"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health[\"heart_disease\"].hist()\n",
    "\n",
    "split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n",
    "for train_index, test_index in split.split(health, health[\"heart_disease\"]):\n",
    "    strat_train_set = health.loc[train_index]\n",
    "    strat_test_set = health.loc[test_index]\n",
    "\n",
    "strat_test_set[\"heart_disease\"].value_counts() / len(strat_test_set)\n",
    "\n",
    "health[\"heart_disease\"].value_counts() / len(health)\n",
    "\n",
    "def heart_disease_proportions(data):\n",
    "    return data[\"heart_disease\"].value_counts() / len(data)\n",
    "\n",
    "train_set, test_set = train_test_split(health, test_size=0.2, random_state=42)\n",
    "\n",
    "compare_props = pd.DataFrame({\n",
    "    \"Overall\": heart_disease_proportions(health),\n",
    "    \"Stratified\": heart_disease_proportions(strat_test_set),\n",
    "    \"Random\": heart_disease_proportions(test_set),\n",
    "}).sort_index()\n",
    "compare_props[\"Rand. %error\"] = 100 * compare_props[\"Random\"] / compare_props[\"Overall\"] - 100\n",
    "compare_props[\"Strat. %error\"] = 100 * compare_props[\"Stratified\"] / compare_props[\"Overall\"] - 100\n",
    "\n",
    "compare_props"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Overall</th>\n",
       "      <th>Stratified</th>\n",
       "      <th>Random</th>\n",
       "      <th>Rand. %error</th>\n",
       "      <th>Strat. %error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Female</th>\n",
       "      <td>0.590344</td>\n",
       "      <td>0.612016</td>\n",
       "      <td>0.560081</td>\n",
       "      <td>-5.126297</td>\n",
       "      <td>3.671083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>0.409656</td>\n",
       "      <td>0.387984</td>\n",
       "      <td>0.439919</td>\n",
       "      <td>7.387374</td>\n",
       "      <td>-5.290303</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Overall  Stratified    Random  Rand. %error  Strat. %error\n",
       "Female  0.590344    0.612016  0.560081     -5.126297       3.671083\n",
       "Male    0.409656    0.387984  0.439919      7.387374      -5.290303"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYIAAAD9CAYAAACx+XApAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8rg+JYAAAACXBIWXMAAAsTAAALEwEAmpwYAAAUJklEQVR4nO3dfaze5X3f8fcHnMXIx6coODkbnoYLgxDx4JY6pdukcVbSkpBEgxhpZmTFUjKjVEzq8EaREsDb0haQrFWFrGBB6/AQlvBUljJpCxpnU7sskiMwniuDBNg8hGTAmPExT6H97o/7d9KbO+fYt88j5Hq/pJ/OfV/f3/W7rh+Rro9/D+ckVYUkqV1HLfUEJElLyyCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjVs2zE5J7gTOBVYAPwRuqKpbu9q5wNeAvwN8D9hYVfu6WoDrgC92h7oN+O3qfnkhyRrgj4GzgWeBy6vq4cPNZ9WqVbVmzZrhznDAwYMHWbFixaz6StJSmuv69f3vf//lqvrwYPtQQQD8HvCFqnoryanARJJHgX3A/fQW+m8D/w74JvArXb9NwAXAWqCA7wBPAzd39buB7wLnd9u9SU6uqpcONZk1a9awY8eOIaf+bhMTE4yPj8+qryQtpbmuX0n2Tdc+1K2hqtpdVW9Nfe22k4DPAbur6p6qehPYAqztwgLgUmBrVT1fVS8AW4GN3YROAc4Crq2qN6rqPmAXsH4W5ydJmqVhrwhI8h/oLeLHAI8C/xn4HWDn1D5VdTDJU8BpwJ7u586+w+zs2uh+Pl1VB2aoD46/id4VBmNjY0xMTAw79XeZnJycdV9JWkoLtX4NHQRV9ZtJ/gXw94Bx4C1gBBi8jbMfWNl9Hum+99dGumcHg7Wp+uoZxt8GbANYt25dzfbyyFtDkt6vFmr9OqK3hqrqL6vqz4C/DXwJmARGB3YbBab+lT9YHwUmu4fFh+srSVoEs319dBm9ZwS76T0IBiDJir52Buvd5/7aiUlWzlCXJC2CwwZBko8k2ZBkJMnRSc4DLgb+G/AAcHqS9UmWA9cAj1fVnq777cAVSVYnOR7YDGwHqKongceAa5MsT3IhcCZw3/yeoiTpUIZ5RlD0bgPdTC849gG/VVUPAiRZD9wE3Env9wg29PW9BTiR3ttAALd2bVM20AuGV+n9HsFFh3t1VJI0vw4bBN3CfM4h6g8Dp85QK+DKbpuuvpfeg2dJ0hLxT0xIUuOGfn30Z8WuF/az8aqHFn3cvdd9etHHlKRheEUgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklq3GGDIMkHk9yWZF+SA0keTfKprrYmSSWZ7Nuu7uubJNcneaXbbkiSvvqaJI8keT3JniSfWJjTlCTNZNmQ+zwHnAM8C5wPfCvJGX37HFtV70zTdxNwAbAWKOA7wNPAzV39buC73THPB+5NcnJVvXTkpyJJmo3DXhFU1cGq2lJVe6vqr6rqT4FngF8a4viXAlur6vmqegHYCmwESHIKcBZwbVW9UVX3AbuA9bM8F0nSLAxzRfAuScaAU4Ddfc37kkz9i/9fV9XLXftpwM6+/XZ2bVO1p6vqwAz1wXE30bvCYGxsjImJiSOdOgBjx8DmM6a7eFlYs52vJE2ZnJxckLXkiIIgyQeAu4CvV9WeJCPAx4HHgOOAr3X187ouI8D+vkPsB0a65wSDtan66unGrqptwDaAdevW1fj4+JFM/SduvOtBtu464vybs72XjC/6mJJ+tkxMTDDbte9Qhl4RkxwF3AG8DVwOUFWTwI5ulx8luRx4McloVb0GTAKjfYcZBSarqpIM1qbqB5AkLZqhXh/t/gV/GzAGrK+qH8+wa0116X7upvegeMpa/vqW0m7gxCQrZ6hLkhbBsL9H8IfAx4DPVtUbU41Jzk7y0SRHJTkO+ANgoqqmbvncDlyRZHWS44HNwHaAqnqS3i2la5MsT3IhcCZw3zyclyRpSIe9NZTkBOAy4C3gh32/BnAZ8FfA7wIfAV6j97D44r7utwAn0nsbCODWrm3KBnrB8Cq9V1Mv8tVRSVpchw2CqtrHX9/qmc7dh+hbwJXdNl19LzB+uDlIkhaOf2JCkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4w4bBEk+mOS2JPuSHEjyaJJP9dXPTbInyetJHklyQl8tSa5P8kq33ZAkffU1XZ/Xu2N8Yv5PUZJ0KMNcESwDngPOAX4OuBr4VreIrwLu79o+BOwAvtnXdxNwAbAWOBP4DHBZX/1u4FHgOODLwL1JPjyH85EkHaFlh9uhqg4CW/qa/jTJM8Av0VvAd1fVPQBJtgAvJzm1qvYAlwJbq+r5rr4V+OfAzUlOAc4Cfr2q3gDuS/JbwHrg5vk5PUmaf2uuemhJxt3+yRULctzDBsGgJGPAKcBu4EvAzqlaVR1M8hRwGrCn+7mzr/vOro3u59NVdWCG+uC4m+hdYTA2NsbExMSRTh2AsWNg8xnvzKrvXMx2vpLee5ZiDQGYnJxckLXkiIIgyQeAu4CvV9WeJCPASwO77QdWdp9Huu/9tZHuOcFgbaq+erqxq2obsA1g3bp1NT4+fiRT/4kb73qQrbuOOP/mbO8l44s+pqSFsXEJrwhmu/YdytBvDSU5CrgDeBu4vGueBEYHdh0FDsxQHwUmq6qG6CtJWgRDBUH3L/jbgDFgfVX9uCvtpvcgeGq/FcBJXftP1bvP/bUTk6ycoS5JWgTDXhH8IfAx4LPdg90pDwCnJ1mfZDlwDfB496AY4HbgiiSrkxwPbAa2A1TVk8BjwLVJlie5kN6bRffN8ZwkSUfgsDfLu98LuAx4C/hh368BXFZVdyVZD9wE3Al8D9jQ1/0W4ERgV/f91q5tygZ6wfAq8CxwUVUNPnOQJC2gYV4f3QfkEPWHgVNnqBVwZbdNV98LjA8xT0nSAvFPTEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS44YKgiSXJ9mR5K0k2/va1ySpJJN929V99SS5Pskr3XZDkgz0fyTJ60n2JPnEvJ6dJOmwlg253w+ArwLnAcdMUz+2qt6Zpn0TcAGwFijgO8DTwM1d/W7gu8D53XZvkpOr6qVhT0CSNDdDXRFU1f1V9SfAK0d4/EuBrVX1fFW9AGwFNgIkOQU4C7i2qt6oqvuAXcD6IxxDkjQH8/WMYF+S55P8cZJVfe2nATv7vu/s2qZqT1fVgRnqkqRFMOytoZm8DHwceAw4DvgacBe9W0gAI8D+vv33AyPdc4LB2lR99XQDJdlE71YTY2NjTExMzGrCY8fA5jOmu4u1sGY7X0nvPUuxhgBMTk4uyFoypyCoqklgR/f1R0kuB15MMlpVrwGTwGhfl1FgsqoqyWBtqn6AaVTVNmAbwLp162p8fHxWc77xrgfZumuu+Xfk9l4yvuhjSloYG696aEnG3f7JFcx27TuU+X59tLqfU28G7ab3oHjK2q5tqnZikpUz1CVJi2DY10eXJVkOHA0cnWR513Z2ko8mOSrJccAfABNVNXXL53bgiiSrkxwPbAa2A1TVk/RuKV3bHe9C4Ezgvvk8QUnSoQ17j+QrwLV93z8P/BvgCeB3gY8Ar9F7PfTivv1uAU6k9zYQwK1d25QN9ILhVeBZ4CJfHZWkxTVUEFTVFmDLDOW7D9GvgCu7bbr6XmB8mDlIkhaGf2JCkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS44YKgiSXJ9mR5K0k2wdq5ybZk+T1JI8kOaGvliTXJ3ml225Ikr76mq7P690xPjFvZyZJGsqwVwQ/AL4K/FF/Y5JVwP3A1cCHgB3AN/t22QRcAKwFzgQ+A1zWV78beBQ4DvgycG+SDx/pSUiSZm+oIKiq+6vqT4BXBkqfA3ZX1T1V9SawBVib5NSufimwtaqer6oXgK3ARoAkpwBnAddW1RtVdR+wC1g/t1OSJB2JZXPsfxqwc+pLVR1M8lTXvmew3n0+ra/v01V1YIb6uyTZRO8Kg7GxMSYmJmY14bFjYPMZ78yq71zMdr6S3nuWYg0BmJycXJC1ZK5BMAK8NNC2H1jZV98/UBvpnhMM1qbqq6cbqKq2AdsA1q1bV+Pj47Oa8I13PcjWXXM97SO395LxRR9T0sLYeNVDSzLu9k+uYLZr36HM9a2hSWB0oG0UODBDfRSYrKoaoq8kaRHMNQh203sQDECSFcBJXftP1bvP/bUTk6ycoS5JWgTDvj66LMly4Gjg6CTLkywDHgBOT7K+q18DPF5Ve7qutwNXJFmd5HhgM7AdoKqeBB4Dru2OdyG9N4vum7/TkyQdzrBXBF8B3gCuAj7fff5KVb1E7y2f3wFeBc4GNvT1uwX4Nr23gf438FDXNmUDsK7rex1wUXdMSdIiGeqpaVVtofdq6HS1h4FTZ6gVcGW3TVffC4wPMwdJ0sLwT0xIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklq3LwEQZKJJG8mmey2J/pq5ybZk+T1JI8kOaGvliTXJ3ml225IkvmYkyRpOPN5RXB5VY1020cBkqwC7geuBj4E7AC+2ddnE3ABsBY4E/gMcNk8zkmSdBgLfWvoc8Duqrqnqt4EtgBrk5za1S8FtlbV81X1ArAV2LjAc5Ik9Vk2j8f6vSTXAU8AX66qCeA0YOfUDlV1MMlTXfuewXr3+bTpDp5kE70rCMbGxpiYmJjVJMeOgc1nvDOrvnMx2/lKeu9ZijUEYHJyckHWkvkKgt8G/gJ4G9gAfDvJLwAjwEsD++4HVnafR7rv/bWRJKmq6u9UVduAbQDr1q2r8fHxWU30xrseZOuu+cy/4ey9ZHzRx5S0MDZe9dCSjLv9kyuY7dp3KPNya6iqvldVB6rqrar6OvDnwPnAJDA6sPsocKD7PFgfBSYHQ0CStHAW6hlBAQF203sQDECSFcBJXTuD9e7zbiRJi2bOQZDk2CTnJVmeZFmSS4B/CPwX4AHg9CTrkywHrgEer6o9XffbgSuSrE5yPLAZ2D7XOUmShjcfN8s/AHwVOBX4S3oPgS+oqicAkqwHbgLuBL5H7xnClFuAE4Fd3fdbuzZJ0iKZcxBU1UvAxw9Rf5heSExXK+DKbpMkLQH/xIQkNc4gkKTGGQSS1DiDQJIaZxBIUuMMAklqnEEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLjDAJJapxBIEmNMwgkqXEGgSQ1ziCQpMYZBJLUOINAkhpnEEhS4wwCSWqcQSBJjTMIJKlxBoEkNc4gkKTGLXkQJPlQkgeSHEyyL8k/Xeo5SVJLli31BICvAW8DY8AvAA8l2VlVu5d0VpLUiCW9IkiyAlgPXF1Vk1X1Z8B/Av7ZUs5LklqSqlq6wZNfBP5nVR3T1/avgHOq6rMD+24CNnVfPwo8McthVwEvz7KvJC2lua5fJ1TVhwcbl/rW0Aiwf6BtP7BycMeq2gZsm+uASXZU1bq5HkeSFttCrV9L/bB4EhgdaBsFDizBXCSpSUsdBE8Cy5Kc3Ne2FvBBsSQtkiUNgqo6CNwP/NskK5L8A+AfA3cs4LBzvr0kSUtkQdavJX1YDL3fIwD+CPg14BXgqqr6xpJOSpIasuRBIElaWkv9jECStMQMghkkWZOkkiz1K7aS9FPmc416TwdBkr1J3kgy2bcdv9TzkqS56ta3t5OsGmh/rFvg1yzWXN7TQdD5bFWN9G0/WOoJSdI8eQa4eOpLkjOAY2befWG8H4LgXZL8XJLbkryY5IUkX01ydFfbmOTPk/z7JP8vydNJ/n7X/lyS/5Pk0r5jfTrJo0le6+pbZjOuJM3SHcBv9H2/FLh96stirVHvuyAAvg68A/xd4BeBXwe+2Fc/G3gcOA74BvAfgY93+38euCnJSLfvQXr/IxwLfBr4UpILZjmuJB2p/wWMJvlYt2j/E+DOvvqirFHv6ddHk+yl90eW3umavgv8KnBsVb3R7XMxsKmq/lGSjcCXq+rkrnYGvVD4m1X1o67tFeDcqnpsmvF+H6iq+pfd/blngA/QC5VnZxp3/s9c0s+6bn37IvArwArgvwObgU8BPwZ+vqr2DvT5fRZgjXo/vBFzQVU9DJDkl4HzgBeTTNWPAp7r2/9HfZ/fAJgKgb62ke54ZwPXAacDfwP4IHDPNHM4gd5/7EONK0mzcQfwP4Cfp++2ECzeGvV+CIJ+zwFvAauq6p3D7TyEbwA3AZ+qqje7tF01zX7zPa4kAVBV+5I8A5wPfGGgvChr1PvqGUFVvQj8V2BrktEkRyU5Kck5szzkSuD/dv+BfxmY9v8mcwHGlaR+XwB+tfv7a/0WZY16XwVB5zfoXSL9BfAqcC/wt2Z5rN+k9wfvDgDXAN9apHEl6Seq6qmq2jFNaVHWqPf0w2JJ0sJ7P14RSJLmkUEgSY0zCCSpcQaBJDXOIJCkxhkEktQ4g0CSGmcQSFLj/j/IU84G8ZMoXwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health[\"gender\"].hist()\n",
    "\n",
    "strat_test_set[\"gender\"].value_counts() / len(strat_test_set)\n",
    "\n",
    "health[\"gender\"].value_counts() / len(health)\n",
    "\n",
    "def gender_proportions(data):\n",
    "    return data[\"gender\"].value_counts() / len(data)\n",
    "\n",
    "train_set, test_set = train_test_split(health, test_size=0.2, random_state=42)\n",
    "\n",
    "compare_props = pd.DataFrame({\n",
    "    \"Overall\": gender_proportions(health),\n",
    "    \"Stratified\": gender_proportions(strat_test_set),\n",
    "    \"Random\": gender_proportions(test_set),\n",
    "}).sort_index()\n",
    "compare_props[\"Rand. %error\"] = 100 * compare_props[\"Random\"] / compare_props[\"Overall\"] - 100\n",
    "compare_props[\"Strat. %error\"] = 100 * compare_props[\"Stratified\"] / compare_props[\"Overall\"] - 100\n",
    "\n",
    "compare_props"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "qILc5nGMtmlj"
   },
   "source": [
    "# Discover and Visualize the Data to Gain Insights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "id": "n0gxQMMRtmlj"
   },
   "outputs": [],
   "source": [
    "health = strat_train_set.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "41EAMfFOtmlk"
   },
   "source": [
    "## Visualizing Geographical Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "id": "CphyZoPEtmlm",
    "outputId": "7eeb517e-f414-4e62-f1dd-d1f500d61afa"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure bad_visualization_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health.plot(kind=\"scatter\", x=\"age\", y=\"avg_glucose_level\")\n",
    "save_fig(\"bad_visualization_plot\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "id": "-21uhPQLtmln",
    "outputId": "e48b1294-ce03-4ea4-f980-09c52c14e941"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure better_visualization_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health.plot(kind=\"scatter\", x=\"age\", y=\"avg_glucose_level\", alpha=0.1)\n",
    "save_fig(\"better_visualization_plot\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 806.4x504 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "# Plot\n",
    "work_type_by_gender = sns.catplot(x=\"gender\", col=\"work_type\", col_wrap=4,\n",
    "                        data=health[health.work_type.notnull()],\n",
    "                        kind=\"count\", height=3.5, aspect=.8, \n",
    "                        palette='tab20')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1310.4x252 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot\n",
    "gender_by_smoking_status = sns.catplot(x = \"gender\", col=\"smoking_status\", col_wrap=4,\n",
    "                            data=health[health.work_type.notnull()],\n",
    "                            kind=\"count\", height=3.5, aspect=1.3, \n",
    "                            palette='tab20')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GWFe163Utmls"
   },
   "source": [
    "## Looking for Correlations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "id": "v7NoOl_7tmls"
   },
   "outputs": [],
   "source": [
    "corr_matrix = health.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "id": "Zoj2G5f9tmlu",
    "outputId": "c135837a-c42a-4603-b43e-40522b22f9a2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bmi                  1.000000\n",
       "age                  0.341470\n",
       "avg_glucose_level    0.171050\n",
       "hypertension         0.161317\n",
       "heart_disease        0.048625\n",
       "stroke               0.032917\n",
       "Name: bmi, dtype: float64"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_matrix[\"bmi\"].sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>stroke</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>age</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.269053</td>\n",
       "      <td>0.250793</td>\n",
       "      <td>0.230001</td>\n",
       "      <td>0.221528</td>\n",
       "      <td>0.341470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>hypertension</th>\n",
       "      <td>0.269053</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.124274</td>\n",
       "      <td>0.127869</td>\n",
       "      <td>0.179614</td>\n",
       "      <td>0.161317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>heart_disease</th>\n",
       "      <td>0.250793</td>\n",
       "      <td>0.124274</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.150672</td>\n",
       "      <td>0.147578</td>\n",
       "      <td>0.048625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>stroke</th>\n",
       "      <td>0.230001</td>\n",
       "      <td>0.127869</td>\n",
       "      <td>0.150672</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.127470</td>\n",
       "      <td>0.032917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <td>0.221528</td>\n",
       "      <td>0.179614</td>\n",
       "      <td>0.147578</td>\n",
       "      <td>0.127470</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.171050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bmi</th>\n",
       "      <td>0.341470</td>\n",
       "      <td>0.161317</td>\n",
       "      <td>0.048625</td>\n",
       "      <td>0.032917</td>\n",
       "      <td>0.171050</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        age  hypertension  heart_disease    stroke  \\\n",
       "age                1.000000      0.269053       0.250793  0.230001   \n",
       "hypertension       0.269053      1.000000       0.124274  0.127869   \n",
       "heart_disease      0.250793      0.124274       1.000000  0.150672   \n",
       "stroke             0.230001      0.127869       0.150672  1.000000   \n",
       "avg_glucose_level  0.221528      0.179614       0.147578  0.127470   \n",
       "bmi                0.341470      0.161317       0.048625  0.032917   \n",
       "\n",
       "                   avg_glucose_level       bmi  \n",
       "age                         0.221528  0.341470  \n",
       "hypertension                0.179614  0.161317  \n",
       "heart_disease               0.147578  0.048625  \n",
       "stroke                      0.127470  0.032917  \n",
       "avg_glucose_level           1.000000  0.171050  \n",
       "bmi                         0.171050  1.000000  "
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(corr_matrix, cmap = 'Blues')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "id": "q1MNdqLutmlx",
    "outputId": "bb18a002-a7dc-46e2-dbd2-8a2fe0161557"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure scatter_matrix_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 36 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# from pandas.tools.plotting import scatter_matrix # For older versions of Pandas\n",
    "from pandas.plotting import scatter_matrix\n",
    "\n",
    "attributes = [\"bmi\", \"age\", \"avg_glucose_level\",\n",
    "              \"hypertension\", \"heart_disease\", \"stroke\"]\n",
    "scatter_matrix(health[attributes], figsize=(12, 8))\n",
    "save_fig(\"scatter_matrix_plot\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "id": "ZJdi2I2ntmly",
    "outputId": "3a991199-24ac-4374-fe39-18d63aaae7b2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure bmi_vs_age_scatterplot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health.plot(kind=\"scatter\", x=\"bmi\", y=\"age\",\n",
    "             alpha=0.1)\n",
    "plt.axis([0, 100, 0, 100])\n",
    "save_fig(\"bmi_vs_age_scatterplot\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8SOpVbvmtml0"
   },
   "source": [
    "## Experimenting with Attribute Combinations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "health[\"heart_disease_and_stroke\"] = health[\"heart_disease\"]*health[\"stroke\"]\n",
    "health[\"heart_disease_and_hypertension\"] = health[\"heart_disease\"]*health[\"hypertension\"]\n",
    "health[\"hypertension_and_stroke\"] = health[\"hypertension\"]*health[\"stroke\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "id": "jsHA7pimtml1",
    "outputId": "602576fe-9b5f-4819-ab0d-b8b32762f60f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bmi                               1.000000\n",
       "age                               0.341470\n",
       "avg_glucose_level                 0.171050\n",
       "hypertension                      0.161317\n",
       "heart_disease                     0.048625\n",
       "heart_disease_and_hypertension    0.041354\n",
       "hypertension_and_stroke           0.036439\n",
       "stroke                            0.032917\n",
       "heart_disease_and_stroke          0.022042\n",
       "Name: bmi, dtype: float64"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corr_matrix = health.corr()\n",
    "corr_matrix[\"bmi\"].sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop the three attributes we added by combining existing attributes because we will add them in later in script\n",
    "# using the custom transformer function:\n",
    "\n",
    "health = health.drop(columns=['heart_disease_and_stroke', 'heart_disease_and_hypertension', 'hypertension_and_stroke'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "id": "cgX7msDMtml1",
    "outputId": "b9959709-a1d7-4923-c30e-f0f7078a0585"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "health.plot(kind=\"scatter\", x=\"avg_glucose_level\", y=\"bmi\",\n",
    "             alpha=0.2)\n",
    "plt.axis([0, 300, 0, 100])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "id": "ya2qNkEDtml2",
    "outputId": "69b79d60-96d6-47b4-9909-83ba7feedc73"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>stroke</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>bmi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3927.000000</td>\n",
       "      <td>3927.000000</td>\n",
       "      <td>3927.000000</td>\n",
       "      <td>3927.000000</td>\n",
       "      <td>3927.000000</td>\n",
       "      <td>3927.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>43.058253</td>\n",
       "      <td>0.093710</td>\n",
       "      <td>0.049402</td>\n",
       "      <td>0.042271</td>\n",
       "      <td>105.104757</td>\n",
       "      <td>28.899873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>22.576167</td>\n",
       "      <td>0.291462</td>\n",
       "      <td>0.216733</td>\n",
       "      <td>0.201233</td>\n",
       "      <td>43.869269</td>\n",
       "      <td>7.795270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.080000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>55.220000</td>\n",
       "      <td>10.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>77.050000</td>\n",
       "      <td>23.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>91.850000</td>\n",
       "      <td>28.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>60.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>113.090000</td>\n",
       "      <td>33.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>82.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>271.740000</td>\n",
       "      <td>92.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               age  hypertension  heart_disease       stroke  \\\n",
       "count  3927.000000   3927.000000    3927.000000  3927.000000   \n",
       "mean     43.058253      0.093710       0.049402     0.042271   \n",
       "std      22.576167      0.291462       0.216733     0.201233   \n",
       "min       0.080000      0.000000       0.000000     0.000000   \n",
       "25%      25.000000      0.000000       0.000000     0.000000   \n",
       "50%      45.000000      0.000000       0.000000     0.000000   \n",
       "75%      60.500000      0.000000       0.000000     0.000000   \n",
       "max      82.000000      1.000000       1.000000     1.000000   \n",
       "\n",
       "       avg_glucose_level          bmi  \n",
       "count        3927.000000  3927.000000  \n",
       "mean          105.104757    28.899873  \n",
       "std            43.869269     7.795270  \n",
       "min            55.220000    10.300000  \n",
       "25%            77.050000    23.500000  \n",
       "50%            91.850000    28.100000  \n",
       "75%           113.090000    33.200000  \n",
       "max           271.740000    92.000000  "
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "clgye011tml2"
   },
   "source": [
    "# Prepare the Data for Machine Learning Algorithms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "health = strat_train_set.drop(\"bmi\", axis=1) # drop labels for training set\n",
    "health_labels = strat_train_set[\"bmi\"].copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "77Fd680Atml3"
   },
   "source": [
    "## Data Cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oXfbfhDHtml3"
   },
   "source": [
    "There are no missing numerical values in the dataset. The cell below demonstrates that there are no rows with missing values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "id": "iDVJa2w_tml4",
    "outputId": "010915d5-4ea9-409a-815d-beca96f04c86"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>stroke</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>diabetes_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [gender, age, hypertension, heart_disease, stroke, ever_married, work_type, Residence_type, avg_glucose_level, smoking_status, diabetes_status]\n",
       "Index: []"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_incomplete_rows = health[health.isnull().any(axis=1)].head()\n",
    "sample_incomplete_rows"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are no missing numerical values in this dataset, but this is a very rare phenomenon. Usually, a dataset contains some missing numerical values. Conequently, in the following cells we will demonstrate how imputation could be used to replace missing values, were there any. Additionally, the imputation process will be included in the pipeline used to prepare the data for modelling so that if data were added to this dataset in the future that contained missing numerical values, the pipeline is already set up to handle this.\n",
    "\n",
    "\n",
    "#median = health[\"col_name\"].median()\n",
    "#sample_incomplete_rows[\"col_name\"].fillna(median, inplace=True) # option 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "id": "9IDhjIEMtmmA"
   },
   "outputs": [],
   "source": [
    "from sklearn.impute import SimpleImputer\n",
    "imputer = SimpleImputer(strategy=\"median\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Mc1CKHnQtmmB"
   },
   "source": [
    "Remove the text attribute because median can only be calculated on numerical attributes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "id": "Wb5vpk26tmmB"
   },
   "outputs": [],
   "source": [
    "health_num = health.select_dtypes(include=[np.number])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "id": "5haxGJJutmmB",
    "outputId": "52f07877-9819-4e03-f14c-897ccf29bb86"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SimpleImputer(strategy='median')"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imputer.fit(health_num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "id": "2-4tNfsNtmmC",
    "outputId": "12226425-af92-4767-bc8c-a0bdf7940338"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([45.  ,  0.  ,  0.  ,  0.  , 91.85])"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imputer.statistics_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "omlQ30DgtmmE"
   },
   "source": [
    "Check that this is the same as manually computing the median of each attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "id": "-n5yw7wgtmmE",
    "outputId": "18cfdfe8-db9d-4013-a581-c7068854fc8d"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([45.  ,  0.  ,  0.  ,  0.  , 91.85])"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health_num.median().values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mw7kovqFtmmF"
   },
   "source": [
    "Transform the training set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "id": "q_imOddCtmmF"
   },
   "outputs": [],
   "source": [
    "X = imputer.transform(health_num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "id": "9CySI7NItmmF"
   },
   "outputs": [],
   "source": [
    "health_tr = pd.DataFrame(X, columns=health_num.columns,\n",
    "                          index=health.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "id": "yYWKNRB7tmmF",
    "outputId": "c56586ae-010b-40b3-dc33-acfcaf7a8afb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>stroke</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [age, hypertension, heart_disease, stroke, avg_glucose_level]\n",
       "Index: []"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health_tr.loc[sample_incomplete_rows.index.values]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "id": "kbnRODA-tmmG",
    "outputId": "4f3ca563-160c-42e1-a12a-8c028c3c7ae5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'median'"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "imputer.strategy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "id": "He1CBjYRtmmH"
   },
   "outputs": [],
   "source": [
    "health_tr = pd.DataFrame(X, columns=health_num.columns,\n",
    "                          index=health_num.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {
    "id": "bhp1ZDqCtmmH",
    "outputId": "06961db4-0558-441f-9bec-6d897bfea4b4"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>stroke</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3759</th>\n",
       "      <td>47.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>111.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1076</th>\n",
       "      <td>36.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>77.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3120</th>\n",
       "      <td>55.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>186.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>22.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>89.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>277</th>\n",
       "      <td>63.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>83.74</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       age  hypertension  heart_disease  stroke  avg_glucose_level\n",
       "3759  47.0           0.0            0.0     0.0             111.15\n",
       "1076  36.0           0.0            0.0     0.0              77.92\n",
       "3120  55.0           1.0            0.0     0.0             186.40\n",
       "235   22.0           0.0            0.0     0.0              89.06\n",
       "277   63.0           0.0            0.0     0.0              83.74"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health_tr.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vJj1XgINtmmI"
   },
   "source": [
    "## Handling Text and Categorical Attributes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gF51avtqtmmI"
   },
   "source": [
    "Now let's preprocess the categorical input feature, `gender, ever_married, work_type, Residence_type, smoking_status and diabetes_status`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "id": "YZZsKVxXtmmJ",
    "outputId": "217b8d83-f51b-4183-f7f6-b1cc74cfe2bc"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>diabetes_status</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3759</th>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1076</th>\n",
       "      <td>Female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Urban</td>\n",
       "      <td>not_reported</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3120</th>\n",
       "      <td>Female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Govt_job</td>\n",
       "      <td>Urban</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>pre-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>Female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>277</th>\n",
       "      <td>Female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>not_reported</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3936</th>\n",
       "      <td>Female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Rural</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3685</th>\n",
       "      <td>Male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>smokes</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3255</th>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>children</td>\n",
       "      <td>Rural</td>\n",
       "      <td>not_reported</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1609</th>\n",
       "      <td>Male</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>smokes</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4683</th>\n",
       "      <td>Female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      gender ever_married      work_type Residence_type smoking_status  \\\n",
       "3759    Male           No        Private          Rural   never smoked   \n",
       "1076  Female          Yes  Self-employed          Urban   not_reported   \n",
       "3120  Female          Yes       Govt_job          Urban   never smoked   \n",
       "235   Female          Yes        Private          Urban   never smoked   \n",
       "277   Female          Yes        Private          Urban   not_reported   \n",
       "3936  Female          Yes  Self-employed          Rural   never smoked   \n",
       "3685    Male          Yes        Private          Rural         smokes   \n",
       "3255    Male           No       children          Rural   not_reported   \n",
       "1609    Male           No        Private          Rural         smokes   \n",
       "4683  Female          Yes        Private          Rural   never smoked   \n",
       "\n",
       "     diabetes_status  \n",
       "3759    non-diabetic  \n",
       "1076    non-diabetic  \n",
       "3120    pre-diabetic  \n",
       "235     non-diabetic  \n",
       "277     non-diabetic  \n",
       "3936    non-diabetic  \n",
       "3685    non-diabetic  \n",
       "3255    non-diabetic  \n",
       "1609    non-diabetic  \n",
       "4683    non-diabetic  "
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health_cat = health[[\"gender\", \"ever_married\", \"work_type\", \"Residence_type\", \"smoking_status\", \"diabetes_status\"]]\n",
    "health_cat.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "id": "BdDGVRjXtmmL",
    "outputId": "924fcada-6d11-40ed-ba4c-619576e4132c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 2., 0., 1., 2.],\n",
       "       [0., 1., 3., 1., 2., 2.],\n",
       "       [0., 1., 0., 1., 1., 3.],\n",
       "       [0., 1., 2., 1., 1., 2.],\n",
       "       [0., 1., 2., 1., 2., 2.],\n",
       "       [0., 1., 3., 0., 1., 2.],\n",
       "       [1., 1., 2., 0., 3., 2.],\n",
       "       [1., 0., 4., 0., 2., 2.],\n",
       "       [1., 0., 2., 0., 3., 2.],\n",
       "       [0., 1., 2., 0., 1., 2.]])"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "\n",
    "ordinal_encoder = OrdinalEncoder()\n",
    "health_cat_encoded = ordinal_encoder.fit_transform(health_cat)\n",
    "health_cat_encoded[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "id": "tdpyZiW0tmmM",
    "outputId": "4dc8f2f3-0383-4a4b-f977-1644b06f782f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array(['Female', 'Male'], dtype=object),\n",
       " array(['No', 'Yes'], dtype=object),\n",
       " array(['Govt_job', 'Never_worked', 'Private', 'Self-employed', 'children'],\n",
       "       dtype=object),\n",
       " array(['Rural', 'Urban'], dtype=object),\n",
       " array(['formerly smoked', 'never smoked', 'not_reported', 'smokes'],\n",
       "       dtype=object),\n",
       " array(['0', 'diabetic', 'non-diabetic', 'pre-diabetic'], dtype=object)]"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ordinal_encoder.categories_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "id": "shfBgMectmmM",
    "outputId": "8c4c9bc5-b13e-4ca5-e8a3-0cc2b4cd30a4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1., 1., ..., 0., 1., 0.],\n",
       "       [1., 0., 0., ..., 0., 1., 0.],\n",
       "       [1., 0., 0., ..., 0., 0., 1.],\n",
       "       ...,\n",
       "       [1., 0., 0., ..., 0., 1., 0.],\n",
       "       [0., 1., 0., ..., 0., 1., 0.],\n",
       "       [0., 1., 0., ..., 0., 0., 1.]])"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "cat_encoder = OneHotEncoder(sparse=False)\n",
    "health_cat_1hot = cat_encoder.fit_transform(health_cat)\n",
    "health_cat_1hot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "id": "boziBKF4tmmP",
    "outputId": "3022b4f1-a0e8-45ac-baa9-c765cb6d6e67"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array(['Female', 'Male'], dtype=object),\n",
       " array(['No', 'Yes'], dtype=object),\n",
       " array(['Govt_job', 'Never_worked', 'Private', 'Self-employed', 'children'],\n",
       "       dtype=object),\n",
       " array(['Rural', 'Urban'], dtype=object),\n",
       " array(['formerly smoked', 'never smoked', 'not_reported', 'smokes'],\n",
       "       dtype=object),\n",
       " array(['0', 'diabetic', 'non-diabetic', 'pre-diabetic'], dtype=object)]"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cat_encoder.categories_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SpwODsa4tmmP"
   },
   "source": [
    "## Custom Transformers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "06dLrfdvtmmP"
   },
   "source": [
    "Let's create a custom transformer to add extra attributes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {
    "id": "JGLhLvratmmQ"
   },
   "outputs": [],
   "source": [
    "col_names = \"hypertension\", \"heart_disease\", \"stroke\"\n",
    "hypertension_ix, heart_disease_ix, stroke_ix = [\n",
    "    health.columns.get_loc(c) for c in col_names] # get the column indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "id": "TWnocZeMtmmQ"
   },
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "\n",
    "class CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, add_heart_disease_and_stroke=True): # no *args or **kargs\n",
    "        self.add_heart_disease_and_stroke = add_heart_disease_and_stroke\n",
    "    def fit(self, X, y=None):\n",
    "        return self  # nothing else to do\n",
    "    def transform(self, X):\n",
    "        heart_disease_and_hypertension = X[:, heart_disease_ix] * X[:, hypertension_ix]\n",
    "        hypertension_and_stroke = X[:, hypertension_ix] * X[:, stroke_ix]\n",
    "        if self.add_heart_disease_and_stroke:\n",
    "            heart_disease_and_stroke = X[:, heart_disease_ix] * X[:, stroke_ix]\n",
    "            return np.c_[X, heart_disease_and_stroke, heart_disease_and_hypertension,\n",
    "                         hypertension_and_stroke]\n",
    "        else:\n",
    "            return np.c_[X, heart_disease_and_hypertension, hypertension_and_stroke]\n",
    "\n",
    "attr_adder = CombinedAttributesAdder(add_heart_disease_and_stroke=True)\n",
    "health_extra_attribs = attr_adder.transform(health.values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(health_extra_attribs[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "X7yt5oGUtmmQ"
   },
   "source": [
    "Also, `health_extra_attribs` is a NumPy array, we've lost the column names (unfortunately, that's a problem with Scikit-Learn). To recover a `DataFrame`, you can run this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>age</th>\n",
       "      <th>hypertension</th>\n",
       "      <th>heart_disease</th>\n",
       "      <th>stroke</th>\n",
       "      <th>ever_married</th>\n",
       "      <th>work_type</th>\n",
       "      <th>Residence_type</th>\n",
       "      <th>avg_glucose_level</th>\n",
       "      <th>smoking_status</th>\n",
       "      <th>diabetes_status</th>\n",
       "      <th>heart_disease_and_stroke</th>\n",
       "      <th>heart_disease_and_hypertension</th>\n",
       "      <th>hypertension_and_stroke</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3759</th>\n",
       "      <td>Male</td>\n",
       "      <td>47.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Private</td>\n",
       "      <td>Rural</td>\n",
       "      <td>111.15</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1076</th>\n",
       "      <td>Female</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Self-employed</td>\n",
       "      <td>Urban</td>\n",
       "      <td>77.92</td>\n",
       "      <td>not_reported</td>\n",
       "      <td>non-diabetic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3120</th>\n",
       "      <td>Female</td>\n",
       "      <td>55.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Govt_job</td>\n",
       "      <td>Urban</td>\n",
       "      <td>186.4</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>pre-diabetic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>235</th>\n",
       "      <td>Female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>89.06</td>\n",
       "      <td>never smoked</td>\n",
       "      <td>non-diabetic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>277</th>\n",
       "      <td>Female</td>\n",
       "      <td>63.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Private</td>\n",
       "      <td>Urban</td>\n",
       "      <td>83.74</td>\n",
       "      <td>not_reported</td>\n",
       "      <td>non-diabetic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      gender   age hypertension heart_disease stroke ever_married  \\\n",
       "3759    Male  47.0            0             0      0           No   \n",
       "1076  Female  36.0            0             0      0          Yes   \n",
       "3120  Female  55.0            1             0      0          Yes   \n",
       "235   Female  22.0            0             0      0          Yes   \n",
       "277   Female  63.0            0             0      0          Yes   \n",
       "\n",
       "          work_type Residence_type avg_glucose_level smoking_status  \\\n",
       "3759        Private          Rural            111.15   never smoked   \n",
       "1076  Self-employed          Urban             77.92   not_reported   \n",
       "3120       Govt_job          Urban             186.4   never smoked   \n",
       "235         Private          Urban             89.06   never smoked   \n",
       "277         Private          Urban             83.74   not_reported   \n",
       "\n",
       "     diabetes_status heart_disease_and_stroke heart_disease_and_hypertension  \\\n",
       "3759    non-diabetic                        0                              0   \n",
       "1076    non-diabetic                        0                              0   \n",
       "3120    pre-diabetic                        0                              0   \n",
       "235     non-diabetic                        0                              0   \n",
       "277     non-diabetic                        0                              0   \n",
       "\n",
       "     hypertension_and_stroke  \n",
       "3759                       0  \n",
       "1076                       0  \n",
       "3120                       0  \n",
       "235                        0  \n",
       "277                        0  "
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health_extra_attribs = pd.DataFrame(\n",
    "    health_extra_attribs,\n",
    "    columns=list(health.columns)+[\"heart_disease_and_stroke\",\"heart_disease_and_hypertension\",\"hypertension_and_stroke\"],\n",
    "    index=health.index)\n",
    "health_extra_attribs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "_yi6yXGCtmmR"
   },
   "source": [
    "## Transformation Pipelines"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "b-YWdoO0tmmR"
   },
   "source": [
    "Now let's build a pipeline for preprocessing the numerical attributes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "num_pipeline = Pipeline([\n",
    "        ('imputer', SimpleImputer(strategy=\"median\")),\n",
    "        ('attribs_adder', CombinedAttributesAdder()),\n",
    "        ('std_scaler', StandardScaler()),\n",
    "    ])\n",
    "\n",
    "health_num_tr = num_pipeline.fit_transform(health_num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.17461993, -0.32155844, -0.22796694, ..., -0.18968375,\n",
       "        -0.09345386, -0.20621556],\n",
       "       [-0.31268159, -0.32155844, -0.22796694, ..., -0.18968375,\n",
       "        -0.09345386, -0.20621556],\n",
       "       [ 0.52902104,  3.1098546 , -0.22796694, ..., -0.18968375,\n",
       "        -0.09345386, -0.20621556],\n",
       "       ...,\n",
       "       [ 1.59222437, -0.32155844, -0.22796694, ..., -0.18968375,\n",
       "        -0.09345386, -0.20621556],\n",
       "       [-0.17978118, -0.32155844, -0.22796694, ..., -0.18968375,\n",
       "        -0.09345386, -0.20621556],\n",
       "       [-0.17978118, -0.32155844, -0.22796694, ..., -0.18968375,\n",
       "        -0.09345386, -0.20621556]])"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health_num_tr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "id": "89AtU3wAtmmT"
   },
   "outputs": [],
   "source": [
    "from sklearn.compose import ColumnTransformer\n",
    "\n",
    "num_attribs = list(health_num)\n",
    "cat_attribs = [\"gender\", \"ever_married\", \"work_type\", \"Residence_type\", \"smoking_status\", \"diabetes_status\"]\n",
    "\n",
    "full_pipeline = ColumnTransformer([\n",
    "        (\"num\", num_pipeline, num_attribs),\n",
    "        (\"cat\", OneHotEncoder(), cat_attribs),\n",
    "    ])\n",
    "\n",
    "health_prepared = full_pipeline.fit_transform(health)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "id": "Yk69HkajtmmT",
    "outputId": "28f6dde5-3968-4d8a-d04d-22c72c7c57ee"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.17461993, -0.32155844, -0.22796694, ...,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [-0.31268159, -0.32155844, -0.22796694, ...,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [ 0.52902104,  3.1098546 , -0.22796694, ...,  0.        ,\n",
       "         0.        ,  1.        ],\n",
       "       ...,\n",
       "       [ 1.59222437, -0.32155844, -0.22796694, ...,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [-0.17978118, -0.32155844, -0.22796694, ...,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [-0.17978118, -0.32155844, -0.22796694, ...,  0.        ,\n",
       "         0.        ,  1.        ]])"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health_prepared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "id": "xFlqk9TXtmmT",
    "outputId": "b1694769-c4b2-4661-97f8-c552a467ae1b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3927, 27)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health_prepared.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "\n",
    "# Create a class to select numerical or categorical columns \n",
    "class OldDataFrameSelector(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, attribute_names):\n",
    "        self.attribute_names = attribute_names\n",
    "    def fit(self, X, y=None):\n",
    "        return self\n",
    "    def transform(self, X):\n",
    "        return X[self.attribute_names].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Cwmw4VnbtmmV"
   },
   "source": [
    "Now let's join all these components into a big pipeline that will preprocess both the numerical and the categorical features:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "id": "PXhP0gj1tmmV"
   },
   "outputs": [],
   "source": [
    "num_attribs = list(health_num)\n",
    "cat_attribs = [\"gender\", \"ever_married\", \"work_type\", \"Residence_type\", \"smoking_status\", \"diabetes_status\"]\n",
    "\n",
    "old_num_pipeline = Pipeline([\n",
    "        ('selector', OldDataFrameSelector(num_attribs)),\n",
    "        ('imputer', SimpleImputer(strategy=\"median\")),\n",
    "        ('attribs_adder', CombinedAttributesAdder()),\n",
    "        ('std_scaler', StandardScaler()),\n",
    "    ])\n",
    "\n",
    "old_cat_pipeline = Pipeline([\n",
    "        ('selector', OldDataFrameSelector(cat_attribs)),\n",
    "        ('cat_encoder', OneHotEncoder(sparse=False)),\n",
    "    ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {
    "id": "_XkA3xtjtmmV"
   },
   "outputs": [],
   "source": [
    "from sklearn.pipeline import FeatureUnion\n",
    "\n",
    "old_full_pipeline = FeatureUnion(transformer_list=[\n",
    "        (\"num_pipeline\", old_num_pipeline),\n",
    "        (\"cat_pipeline\", old_cat_pipeline),\n",
    "    ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "id": "3kQL7dPAtmmW",
    "outputId": "1780a8f2-8c7d-4509-ea4e-1bc401c2b8bc"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.17461993, -0.32155844, -0.22796694, ...,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [-0.31268159, -0.32155844, -0.22796694, ...,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [ 0.52902104,  3.1098546 , -0.22796694, ...,  0.        ,\n",
       "         0.        ,  1.        ],\n",
       "       ...,\n",
       "       [ 1.59222437, -0.32155844, -0.22796694, ...,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [-0.17978118, -0.32155844, -0.22796694, ...,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [-0.17978118, -0.32155844, -0.22796694, ...,  0.        ,\n",
       "         0.        ,  1.        ]])"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "old_health_prepared = old_full_pipeline.fit_transform(health)\n",
    "old_health_prepared"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0tGKo092tmmW"
   },
   "source": [
    "The result is the same as with the `ColumnTransformer`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "id": "cRTMCOcptmmX",
    "outputId": "5e0059e8-ce28-4803-8f47-38246b294a81"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.allclose(health_prepared, old_health_prepared)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Kyqur1fftmmX"
   },
   "source": [
    "# Select and Train a Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "LdCDV6yQtmmX"
   },
   "source": [
    "## Training and Evaluating on the Training Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "id": "KEbquydjtmmY",
    "outputId": "cf4da969-2601-44cd-b39f-2ea78e205d61"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "lin_reg = LinearRegression()\n",
    "lin_reg.fit(health_prepared, health_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "id": "S_AxL5eItmmY",
    "outputId": "65967b09-dab5-4970-c530-ac50bbde9be5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predictions: [28.37295194 29.5279221  33.58951957 30.90703545 29.69098418]\n"
     ]
    }
   ],
   "source": [
    "# let's try the full preprocessing pipeline on a few training instances\n",
    "some_data = health.iloc[:5]\n",
    "some_labels = health_labels.iloc[:5]\n",
    "some_data_prepared = full_pipeline.transform(some_data)\n",
    "\n",
    "print(\"Predictions:\", lin_reg.predict(some_data_prepared))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "e6h7UQlStmmY"
   },
   "source": [
    "Compare against the actual values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "id": "JgU9hYNftmmY",
    "outputId": "6cb9c7ea-7014-4e7f-96c4-598a12918e66"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Labels: [23.8, 24.9, 28.0, 27.7, 21.4]\n"
     ]
    }
   ],
   "source": [
    "print(\"Labels:\", list(some_labels))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "id": "pCd1o4YNtmmZ",
    "outputId": "575d6449-69c9-4a0d-ee4d-754829b1dde4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.17461993, -0.32155844, -0.22796694, -0.21008855,  0.13781887,\n",
       "        -0.18968375, -0.09345386, -0.20621556,  0.        ,  1.        ,\n",
       "         1.        ,  0.        ,  0.        ,  0.        ,  1.        ,\n",
       "         0.        ,  0.        ,  1.        ,  0.        ,  0.        ,\n",
       "         1.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [-0.31268159, -0.32155844, -0.22796694, -0.21008855, -0.61975545,\n",
       "        -0.18968375, -0.09345386, -0.20621556,  1.        ,  0.        ,\n",
       "         0.        ,  1.        ,  0.        ,  0.        ,  0.        ,\n",
       "         1.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n",
       "         0.        ,  1.        ,  0.        ,  0.        ,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [ 0.52902104,  3.1098546 , -0.22796694, -0.21008855,  1.85336107,\n",
       "        -0.18968375, -0.09345386, -0.20621556,  1.        ,  0.        ,\n",
       "         0.        ,  1.        ,  1.        ,  0.        ,  0.        ,\n",
       "         0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n",
       "         1.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "         0.        ,  1.        ],\n",
       "       [-0.93288353, -0.32155844, -0.22796694, -0.21008855, -0.36578681,\n",
       "        -0.18968375, -0.09345386, -0.20621556,  1.        ,  0.        ,\n",
       "         0.        ,  1.        ,  0.        ,  0.        ,  1.        ,\n",
       "         0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n",
       "         1.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "         1.        ,  0.        ],\n",
       "       [ 0.88342215, -0.32155844, -0.22796694, -0.21008855, -0.48707165,\n",
       "        -0.18968375, -0.09345386, -0.20621556,  1.        ,  0.        ,\n",
       "         0.        ,  1.        ,  0.        ,  0.        ,  1.        ,\n",
       "         0.        ,  0.        ,  0.        ,  1.        ,  0.        ,\n",
       "         0.        ,  1.        ,  0.        ,  0.        ,  0.        ,\n",
       "         1.        ,  0.        ]])"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "some_data_prepared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "id": "YQhDK9jjtmmZ",
    "outputId": "acd218b9-d0c4-45a7-a7ba-068f78e99edb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.745426791774369"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "health_predictions = lin_reg.predict(health_prepared)\n",
    "lin_mse = mean_squared_error(health_labels, health_predictions)\n",
    "lin_rmse = np.sqrt(lin_mse)\n",
    "lin_rmse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "I0OZnKFntmmZ"
   },
   "source": [
    "**Note**: since Scikit-Learn 0.22, you can get the RMSE directly by calling the `mean_squared_error()` function with `squared=False`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "id": "W7yg1QJ_tmma",
    "outputId": "fd0dd2ef-b7ce-4cc2-a522-7f876d9598d7"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.060925746366932"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "\n",
    "lin_mae = mean_absolute_error(health_labels, health_predictions)\n",
    "lin_mae"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {
    "id": "eVjhC0_1tmmb",
    "outputId": "f354db3d-2dbf-486a-ab34-d3de1886ecac"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(random_state=42)"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "\n",
    "tree_reg = DecisionTreeRegressor(random_state=42)\n",
    "tree_reg.fit(health_prepared, health_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "id": "ov4lDuwXtmmb",
    "outputId": "c23541d1-3f23-4926-abab-0bc370d3f904"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health_predictions = tree_reg.predict(health_prepared)\n",
    "tree_mse = mean_squared_error(health_labels, health_predictions)\n",
    "tree_rmse = np.sqrt(tree_mse)\n",
    "tree_rmse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "gLh4Knwetmmb"
   },
   "source": [
    "## Better Evaluation Using Cross-Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {
    "id": "rK_Ff0bdtmmc"
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "scores = cross_val_score(tree_reg, health_prepared, health_labels,\n",
    "                         scoring=\"neg_mean_squared_error\", cv=10)\n",
    "tree_rmse_scores = np.sqrt(-scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {
    "id": "Y0w4hv48tmmc",
    "outputId": "aa4546ea-ed23-4ccd-8608-a8e90d8eeffd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scores: [ 9.01264167  9.34045348  9.55026344  9.86214522  9.62985181  9.49585687\n",
      "  9.36982597  8.98087537  9.82187791 10.53011837]\n",
      "Mean: 9.559391011673558\n",
      "Standard deviation: 0.4277194690562182\n"
     ]
    }
   ],
   "source": [
    "def display_scores(scores):\n",
    "    print(\"Scores:\", scores)\n",
    "    print(\"Mean:\", scores.mean())\n",
    "    print(\"Standard deviation:\", scores.std())\n",
    "\n",
    "display_scores(tree_rmse_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {
    "id": "ggmw_OJ2tmmd",
    "outputId": "5e1d651a-2ae9-4169-d7bd-da11b5572eb3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scores: [6.67917405 6.68982145 6.80667629 6.95415924 6.98930055 6.22438828\n",
      " 6.3231313  6.55808225 7.17204497 7.33146453]\n",
      "Mean: 6.772824289902895\n",
      "Standard deviation: 0.3342343752962058\n"
     ]
    }
   ],
   "source": [
    "lin_scores = cross_val_score(lin_reg, health_prepared, health_labels,\n",
    "                             scoring=\"neg_mean_squared_error\", cv=10)\n",
    "lin_rmse_scores = np.sqrt(-lin_scores)\n",
    "display_scores(lin_rmse_scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "l2iTpTzItmmd"
   },
   "source": [
    "**Note**: we specify `n_estimators=100` to be future-proof since the default value is going to change to 100 in Scikit-Learn 0.22 (for simplicity, this is not shown in the book)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "id": "SCplliXKtmmd",
    "outputId": "67b15bb2-ff31-49c1-80f3-16ea5032bd61"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(random_state=42)"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "forest_reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "forest_reg.fit(health_prepared, health_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "id": "2zAm3GYZtmme",
    "outputId": "7ceede5d-e18e-49be-a45f-692a2d05e19b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.632055245745031"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "health_predictions = forest_reg.predict(health_prepared)\n",
    "forest_mse = mean_squared_error(health_labels, health_predictions)\n",
    "forest_rmse = np.sqrt(forest_mse)\n",
    "forest_rmse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "id": "-jvd5LkGtmme",
    "outputId": "327449e4-dd60-4f15-dcf7-59b37803b581"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Scores: [7.09835177 6.76739491 6.99393458 7.18295815 7.05248459 6.59575149\n",
      " 6.91125329 6.79970356 7.31780071 7.32593177]\n",
      "Mean: 7.004556481625907\n",
      "Standard deviation: 0.22770067907841243\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "forest_scores = cross_val_score(forest_reg, health_prepared, health_labels,\n",
    "                                scoring=\"neg_mean_squared_error\", cv=10)\n",
    "forest_rmse_scores = np.sqrt(-forest_scores)\n",
    "display_scores(forest_rmse_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "id": "kK1js0dktmmf",
    "outputId": "29549bc7-5346-4a31-c7f5-35aaa5e36c47"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    10.000000\n",
       "mean      6.772824\n",
       "std       0.352314\n",
       "min       6.224388\n",
       "25%       6.588355\n",
       "50%       6.748249\n",
       "75%       6.980515\n",
       "max       7.331465\n",
       "dtype: float64"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scores = cross_val_score(lin_reg, health_prepared, health_labels, scoring=\"neg_mean_squared_error\", cv=10)\n",
    "pd.Series(np.sqrt(-scores)).describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "id": "dxk_NqmDtmmf",
    "outputId": "68302ef8-5afb-4c8d-cee0-42825b1d5b2b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.869375510185666"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVR\n",
    "\n",
    "svm_reg = SVR(kernel=\"linear\")\n",
    "svm_reg.fit(health_prepared, health_labels)\n",
    "health_predictions = svm_reg.predict(health_prepared)\n",
    "svm_mse = mean_squared_error(health_labels, health_predictions)\n",
    "svm_rmse = np.sqrt(svm_mse)\n",
    "svm_rmse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "oqiXAftrtmmg"
   },
   "source": [
    "# Fine-Tune Your Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WBsJDYBZtmmk"
   },
   "source": [
    "## Grid Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "id": "VOQCItE1tmmk",
    "outputId": "b688d0b2-3369-4eb0-95ba-31470c0a3abb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
       "             param_grid=[{'max_features': [2, 4, 6, 8],\n",
       "                          'n_estimators': [3, 10, 30]},\n",
       "                         {'bootstrap': [False], 'max_features': [2, 3, 4],\n",
       "                          'n_estimators': [3, 10]}],\n",
       "             return_train_score=True, scoring='neg_mean_squared_error')"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "param_grid = [\n",
    "    # try 12 (3×4) combinations of hyperparameters\n",
    "    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n",
    "    # then try 6 (2×3) combinations with bootstrap set as False\n",
    "    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n",
    "  ]\n",
    "\n",
    "forest_reg = RandomForestRegressor(random_state=42)\n",
    "# train across 5 folds, that's a total of (12+6)*5=90 rounds of training \n",
    "grid_search = GridSearchCV(forest_reg, param_grid, cv=5,\n",
    "                           scoring='neg_mean_squared_error',\n",
    "                           return_train_score=True)\n",
    "grid_search.fit(health_prepared, health_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "g5wUB4Dbtmml"
   },
   "source": [
    "The best hyperparameter combination found:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "id": "wWGUTgXdtmml",
    "outputId": "44fd2faa-c8cc-46fd-9343-1660efe7f97b"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_features': 8, 'n_estimators': 30}"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "id": "9jR5m5rFtmmm",
    "outputId": "c0f441e2-c3dd-48f3-f10e-e6c0feb1faaa"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(max_features=8, n_estimators=30, random_state=42)"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grid_search.best_estimator_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RxjKpZ3htmmm"
   },
   "source": [
    "Let's look at the score of each hyperparameter combination tested during the grid search:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {
    "id": "oe6YVvhbtmmq",
    "outputId": "013f8084-ab18-4b0a-ebee-c7edaf9a85ba"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8.036879942308463 {'max_features': 2, 'n_estimators': 3}\n",
      "7.380322609980529 {'max_features': 2, 'n_estimators': 10}\n",
      "7.195069151253345 {'max_features': 2, 'n_estimators': 30}\n",
      "7.8396036694064275 {'max_features': 4, 'n_estimators': 3}\n",
      "7.232373998165553 {'max_features': 4, 'n_estimators': 10}\n",
      "7.111276023822144 {'max_features': 4, 'n_estimators': 30}\n",
      "7.891209745384485 {'max_features': 6, 'n_estimators': 3}\n",
      "7.227347775893907 {'max_features': 6, 'n_estimators': 10}\n",
      "7.0446276316013625 {'max_features': 6, 'n_estimators': 30}\n",
      "7.928115619044917 {'max_features': 8, 'n_estimators': 3}\n",
      "7.2212900591454225 {'max_features': 8, 'n_estimators': 10}\n",
      "7.0334691283964625 {'max_features': 8, 'n_estimators': 30}\n",
      "8.299236440425966 {'bootstrap': False, 'max_features': 2, 'n_estimators': 3}\n",
      "7.718645302326252 {'bootstrap': False, 'max_features': 2, 'n_estimators': 10}\n",
      "8.261505391773339 {'bootstrap': False, 'max_features': 3, 'n_estimators': 3}\n",
      "7.69635277707174 {'bootstrap': False, 'max_features': 3, 'n_estimators': 10}\n",
      "7.990567068480765 {'bootstrap': False, 'max_features': 4, 'n_estimators': 3}\n",
      "7.60188316030434 {'bootstrap': False, 'max_features': 4, 'n_estimators': 10}\n"
     ]
    }
   ],
   "source": [
    "cvres = grid_search.cv_results_\n",
    "for mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n",
    "    print(np.sqrt(-mean_score), params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "id": "1Q9OoQMBtmms",
    "outputId": "c4c966cb-40d5-464c-dce8-f5a3c3a38ae8"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_max_features</th>\n",
       "      <th>param_n_estimators</th>\n",
       "      <th>param_bootstrap</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>...</th>\n",
       "      <th>mean_test_score</th>\n",
       "      <th>std_test_score</th>\n",
       "      <th>rank_test_score</th>\n",
       "      <th>split0_train_score</th>\n",
       "      <th>split1_train_score</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>split3_train_score</th>\n",
       "      <th>split4_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.020750</td>\n",
       "      <td>0.005518</td>\n",
       "      <td>0.002141</td>\n",
       "      <td>0.000514</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 2, 'n_estimators': 3}</td>\n",
       "      <td>-63.637022</td>\n",
       "      <td>-61.925325</td>\n",
       "      <td>...</td>\n",
       "      <td>-64.591439</td>\n",
       "      <td>4.938621</td>\n",
       "      <td>16</td>\n",
       "      <td>-16.112197</td>\n",
       "      <td>-1.573969e+01</td>\n",
       "      <td>-15.683269</td>\n",
       "      <td>-14.991755</td>\n",
       "      <td>-1.456658e+01</td>\n",
       "      <td>-15.418697</td>\n",
       "      <td>0.558992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.053223</td>\n",
       "      <td>0.001393</td>\n",
       "      <td>0.004286</td>\n",
       "      <td>0.001369</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 2, 'n_estimators': 10}</td>\n",
       "      <td>-53.934256</td>\n",
       "      <td>-53.931616</td>\n",
       "      <td>...</td>\n",
       "      <td>-54.469162</td>\n",
       "      <td>4.250817</td>\n",
       "      <td>8</td>\n",
       "      <td>-9.582158</td>\n",
       "      <td>-9.436900e+00</td>\n",
       "      <td>-9.642764</td>\n",
       "      <td>-9.323335</td>\n",
       "      <td>-8.900726e+00</td>\n",
       "      <td>-9.377177</td>\n",
       "      <td>0.263069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.123368</td>\n",
       "      <td>0.004789</td>\n",
       "      <td>0.008366</td>\n",
       "      <td>0.000575</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 2, 'n_estimators': 30}</td>\n",
       "      <td>-50.291765</td>\n",
       "      <td>-51.350730</td>\n",
       "      <td>...</td>\n",
       "      <td>-51.769020</td>\n",
       "      <td>4.367150</td>\n",
       "      <td>4</td>\n",
       "      <td>-8.184792</td>\n",
       "      <td>-8.121551e+00</td>\n",
       "      <td>-7.932202</td>\n",
       "      <td>-7.732169</td>\n",
       "      <td>-7.471536e+00</td>\n",
       "      <td>-7.888450</td>\n",
       "      <td>0.261653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.015081</td>\n",
       "      <td>0.000730</td>\n",
       "      <td>0.001639</td>\n",
       "      <td>0.000054</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 4, 'n_estimators': 3}</td>\n",
       "      <td>-61.599405</td>\n",
       "      <td>-64.676193</td>\n",
       "      <td>...</td>\n",
       "      <td>-61.459386</td>\n",
       "      <td>4.788523</td>\n",
       "      <td>12</td>\n",
       "      <td>-15.605128</td>\n",
       "      <td>-1.526859e+01</td>\n",
       "      <td>-14.994499</td>\n",
       "      <td>-15.234713</td>\n",
       "      <td>-1.384313e+01</td>\n",
       "      <td>-14.989212</td>\n",
       "      <td>0.605178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.053479</td>\n",
       "      <td>0.003800</td>\n",
       "      <td>0.004054</td>\n",
       "      <td>0.000423</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 4, 'n_estimators': 10}</td>\n",
       "      <td>-51.836808</td>\n",
       "      <td>-53.130618</td>\n",
       "      <td>...</td>\n",
       "      <td>-52.307234</td>\n",
       "      <td>3.729391</td>\n",
       "      <td>7</td>\n",
       "      <td>-9.384528</td>\n",
       "      <td>-9.341680e+00</td>\n",
       "      <td>-9.346586</td>\n",
       "      <td>-9.115358</td>\n",
       "      <td>-8.569308e+00</td>\n",
       "      <td>-9.151492</td>\n",
       "      <td>0.306197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.159801</td>\n",
       "      <td>0.005287</td>\n",
       "      <td>0.010555</td>\n",
       "      <td>0.001556</td>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 4, 'n_estimators': 30}</td>\n",
       "      <td>-49.801152</td>\n",
       "      <td>-50.618008</td>\n",
       "      <td>...</td>\n",
       "      <td>-50.570247</td>\n",
       "      <td>4.014606</td>\n",
       "      <td>3</td>\n",
       "      <td>-8.035242</td>\n",
       "      <td>-7.922867e+00</td>\n",
       "      <td>-7.851383</td>\n",
       "      <td>-7.715690</td>\n",
       "      <td>-7.196294e+00</td>\n",
       "      <td>-7.744295</td>\n",
       "      <td>0.292960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.019077</td>\n",
       "      <td>0.000983</td>\n",
       "      <td>0.002482</td>\n",
       "      <td>0.001065</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 6, 'n_estimators': 3}</td>\n",
       "      <td>-59.409771</td>\n",
       "      <td>-59.638982</td>\n",
       "      <td>...</td>\n",
       "      <td>-62.271191</td>\n",
       "      <td>5.014532</td>\n",
       "      <td>13</td>\n",
       "      <td>-15.800679</td>\n",
       "      <td>-1.529293e+01</td>\n",
       "      <td>-15.109767</td>\n",
       "      <td>-15.005266</td>\n",
       "      <td>-1.402079e+01</td>\n",
       "      <td>-15.045887</td>\n",
       "      <td>0.580911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.059728</td>\n",
       "      <td>0.004649</td>\n",
       "      <td>0.003798</td>\n",
       "      <td>0.000434</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 6, 'n_estimators': 10}</td>\n",
       "      <td>-50.399421</td>\n",
       "      <td>-50.550370</td>\n",
       "      <td>...</td>\n",
       "      <td>-52.234556</td>\n",
       "      <td>4.145782</td>\n",
       "      <td>6</td>\n",
       "      <td>-9.433408</td>\n",
       "      <td>-9.171720e+00</td>\n",
       "      <td>-9.295552</td>\n",
       "      <td>-9.146613</td>\n",
       "      <td>-8.721510e+00</td>\n",
       "      <td>-9.153761</td>\n",
       "      <td>0.238965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.161960</td>\n",
       "      <td>0.014390</td>\n",
       "      <td>0.009469</td>\n",
       "      <td>0.001635</td>\n",
       "      <td>6</td>\n",
       "      <td>30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 6, 'n_estimators': 30}</td>\n",
       "      <td>-47.598759</td>\n",
       "      <td>-49.507589</td>\n",
       "      <td>...</td>\n",
       "      <td>-49.626778</td>\n",
       "      <td>3.942805</td>\n",
       "      <td>2</td>\n",
       "      <td>-7.900144</td>\n",
       "      <td>-7.737399e+00</td>\n",
       "      <td>-7.749293</td>\n",
       "      <td>-7.552211</td>\n",
       "      <td>-7.079237e+00</td>\n",
       "      <td>-7.603657</td>\n",
       "      <td>0.284487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.018242</td>\n",
       "      <td>0.000464</td>\n",
       "      <td>0.001617</td>\n",
       "      <td>0.000041</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 8, 'n_estimators': 3}</td>\n",
       "      <td>-62.840205</td>\n",
       "      <td>-62.310348</td>\n",
       "      <td>...</td>\n",
       "      <td>-62.855017</td>\n",
       "      <td>1.807688</td>\n",
       "      <td>14</td>\n",
       "      <td>-15.674019</td>\n",
       "      <td>-1.575001e+01</td>\n",
       "      <td>-15.499068</td>\n",
       "      <td>-15.552530</td>\n",
       "      <td>-1.472422e+01</td>\n",
       "      <td>-15.439969</td>\n",
       "      <td>0.368609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.063480</td>\n",
       "      <td>0.005899</td>\n",
       "      <td>0.003512</td>\n",
       "      <td>0.000339</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 8, 'n_estimators': 10}</td>\n",
       "      <td>-50.228105</td>\n",
       "      <td>-52.232381</td>\n",
       "      <td>...</td>\n",
       "      <td>-52.147030</td>\n",
       "      <td>3.289619</td>\n",
       "      <td>5</td>\n",
       "      <td>-9.541928</td>\n",
       "      <td>-9.352010e+00</td>\n",
       "      <td>-9.280289</td>\n",
       "      <td>-8.913370</td>\n",
       "      <td>-8.690893e+00</td>\n",
       "      <td>-9.155698</td>\n",
       "      <td>0.309193</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.177443</td>\n",
       "      <td>0.015651</td>\n",
       "      <td>0.008605</td>\n",
       "      <td>0.000813</td>\n",
       "      <td>8</td>\n",
       "      <td>30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>{'max_features': 8, 'n_estimators': 30}</td>\n",
       "      <td>-47.075944</td>\n",
       "      <td>-50.799952</td>\n",
       "      <td>...</td>\n",
       "      <td>-49.469688</td>\n",
       "      <td>3.985339</td>\n",
       "      <td>1</td>\n",
       "      <td>-7.840402</td>\n",
       "      <td>-7.774480e+00</td>\n",
       "      <td>-7.756918</td>\n",
       "      <td>-7.383469</td>\n",
       "      <td>-7.097833e+00</td>\n",
       "      <td>-7.570620</td>\n",
       "      <td>0.285518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.016849</td>\n",
       "      <td>0.000385</td>\n",
       "      <td>0.001808</td>\n",
       "      <td>0.000113</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>{'bootstrap': False, 'max_features': 2, 'n_est...</td>\n",
       "      <td>-69.775264</td>\n",
       "      <td>-65.008838</td>\n",
       "      <td>...</td>\n",
       "      <td>-68.877325</td>\n",
       "      <td>4.659150</td>\n",
       "      <td>18</td>\n",
       "      <td>-0.000045</td>\n",
       "      <td>-3.869713e-30</td>\n",
       "      <td>-0.002062</td>\n",
       "      <td>-0.000434</td>\n",
       "      <td>-9.147747e-03</td>\n",
       "      <td>-0.002338</td>\n",
       "      <td>0.003487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.055373</td>\n",
       "      <td>0.001826</td>\n",
       "      <td>0.004264</td>\n",
       "      <td>0.000559</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>False</td>\n",
       "      <td>{'bootstrap': False, 'max_features': 2, 'n_est...</td>\n",
       "      <td>-58.564522</td>\n",
       "      <td>-58.083963</td>\n",
       "      <td>...</td>\n",
       "      <td>-59.577485</td>\n",
       "      <td>4.571009</td>\n",
       "      <td>11</td>\n",
       "      <td>-0.000068</td>\n",
       "      <td>-1.135753e-03</td>\n",
       "      <td>-0.000307</td>\n",
       "      <td>-0.000262</td>\n",
       "      <td>-8.232973e-04</td>\n",
       "      <td>-0.000519</td>\n",
       "      <td>0.000397</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.017332</td>\n",
       "      <td>0.000291</td>\n",
       "      <td>0.001712</td>\n",
       "      <td>0.000020</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>{'bootstrap': False, 'max_features': 3, 'n_est...</td>\n",
       "      <td>-69.470647</td>\n",
       "      <td>-64.628239</td>\n",
       "      <td>...</td>\n",
       "      <td>-68.252471</td>\n",
       "      <td>4.493192</td>\n",
       "      <td>17</td>\n",
       "      <td>-0.001561</td>\n",
       "      <td>-5.916729e-03</td>\n",
       "      <td>-0.032137</td>\n",
       "      <td>-0.001189</td>\n",
       "      <td>-4.065320e-30</td>\n",
       "      <td>-0.008161</td>\n",
       "      <td>0.012154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.061134</td>\n",
       "      <td>0.006488</td>\n",
       "      <td>0.004864</td>\n",
       "      <td>0.001239</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>False</td>\n",
       "      <td>{'bootstrap': False, 'max_features': 3, 'n_est...</td>\n",
       "      <td>-59.952963</td>\n",
       "      <td>-57.167415</td>\n",
       "      <td>...</td>\n",
       "      <td>-59.233846</td>\n",
       "      <td>4.797443</td>\n",
       "      <td>10</td>\n",
       "      <td>-0.000820</td>\n",
       "      <td>-5.325056e-04</td>\n",
       "      <td>-0.003110</td>\n",
       "      <td>-0.000671</td>\n",
       "      <td>-1.417250e-04</td>\n",
       "      <td>-0.001055</td>\n",
       "      <td>0.001052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0.023593</td>\n",
       "      <td>0.001646</td>\n",
       "      <td>0.002315</td>\n",
       "      <td>0.000688</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>False</td>\n",
       "      <td>{'bootstrap': False, 'max_features': 4, 'n_est...</td>\n",
       "      <td>-61.487720</td>\n",
       "      <td>-61.488910</td>\n",
       "      <td>...</td>\n",
       "      <td>-63.849162</td>\n",
       "      <td>4.752765</td>\n",
       "      <td>15</td>\n",
       "      <td>-0.008565</td>\n",
       "      <td>-2.827833e-03</td>\n",
       "      <td>-0.052008</td>\n",
       "      <td>-0.001630</td>\n",
       "      <td>-4.065320e-30</td>\n",
       "      <td>-0.013006</td>\n",
       "      <td>0.019713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0.066023</td>\n",
       "      <td>0.005667</td>\n",
       "      <td>0.004286</td>\n",
       "      <td>0.000688</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>False</td>\n",
       "      <td>{'bootstrap': False, 'max_features': 4, 'n_est...</td>\n",
       "      <td>-57.063635</td>\n",
       "      <td>-55.452088</td>\n",
       "      <td>...</td>\n",
       "      <td>-57.788628</td>\n",
       "      <td>4.537113</td>\n",
       "      <td>9</td>\n",
       "      <td>-0.000771</td>\n",
       "      <td>-4.730818e-04</td>\n",
       "      <td>-0.006368</td>\n",
       "      <td>-0.000147</td>\n",
       "      <td>-3.045990e-04</td>\n",
       "      <td>-0.001613</td>\n",
       "      <td>0.002387</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>18 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0        0.020750      0.005518         0.002141        0.000514   \n",
       "1        0.053223      0.001393         0.004286        0.001369   \n",
       "2        0.123368      0.004789         0.008366        0.000575   \n",
       "3        0.015081      0.000730         0.001639        0.000054   \n",
       "4        0.053479      0.003800         0.004054        0.000423   \n",
       "5        0.159801      0.005287         0.010555        0.001556   \n",
       "6        0.019077      0.000983         0.002482        0.001065   \n",
       "7        0.059728      0.004649         0.003798        0.000434   \n",
       "8        0.161960      0.014390         0.009469        0.001635   \n",
       "9        0.018242      0.000464         0.001617        0.000041   \n",
       "10       0.063480      0.005899         0.003512        0.000339   \n",
       "11       0.177443      0.015651         0.008605        0.000813   \n",
       "12       0.016849      0.000385         0.001808        0.000113   \n",
       "13       0.055373      0.001826         0.004264        0.000559   \n",
       "14       0.017332      0.000291         0.001712        0.000020   \n",
       "15       0.061134      0.006488         0.004864        0.001239   \n",
       "16       0.023593      0.001646         0.002315        0.000688   \n",
       "17       0.066023      0.005667         0.004286        0.000688   \n",
       "\n",
       "   param_max_features param_n_estimators param_bootstrap  \\\n",
       "0                   2                  3             NaN   \n",
       "1                   2                 10             NaN   \n",
       "2                   2                 30             NaN   \n",
       "3                   4                  3             NaN   \n",
       "4                   4                 10             NaN   \n",
       "5                   4                 30             NaN   \n",
       "6                   6                  3             NaN   \n",
       "7                   6                 10             NaN   \n",
       "8                   6                 30             NaN   \n",
       "9                   8                  3             NaN   \n",
       "10                  8                 10             NaN   \n",
       "11                  8                 30             NaN   \n",
       "12                  2                  3           False   \n",
       "13                  2                 10           False   \n",
       "14                  3                  3           False   \n",
       "15                  3                 10           False   \n",
       "16                  4                  3           False   \n",
       "17                  4                 10           False   \n",
       "\n",
       "                                               params  split0_test_score  \\\n",
       "0              {'max_features': 2, 'n_estimators': 3}         -63.637022   \n",
       "1             {'max_features': 2, 'n_estimators': 10}         -53.934256   \n",
       "2             {'max_features': 2, 'n_estimators': 30}         -50.291765   \n",
       "3              {'max_features': 4, 'n_estimators': 3}         -61.599405   \n",
       "4             {'max_features': 4, 'n_estimators': 10}         -51.836808   \n",
       "5             {'max_features': 4, 'n_estimators': 30}         -49.801152   \n",
       "6              {'max_features': 6, 'n_estimators': 3}         -59.409771   \n",
       "7             {'max_features': 6, 'n_estimators': 10}         -50.399421   \n",
       "8             {'max_features': 6, 'n_estimators': 30}         -47.598759   \n",
       "9              {'max_features': 8, 'n_estimators': 3}         -62.840205   \n",
       "10            {'max_features': 8, 'n_estimators': 10}         -50.228105   \n",
       "11            {'max_features': 8, 'n_estimators': 30}         -47.075944   \n",
       "12  {'bootstrap': False, 'max_features': 2, 'n_est...         -69.775264   \n",
       "13  {'bootstrap': False, 'max_features': 2, 'n_est...         -58.564522   \n",
       "14  {'bootstrap': False, 'max_features': 3, 'n_est...         -69.470647   \n",
       "15  {'bootstrap': False, 'max_features': 3, 'n_est...         -59.952963   \n",
       "16  {'bootstrap': False, 'max_features': 4, 'n_est...         -61.487720   \n",
       "17  {'bootstrap': False, 'max_features': 4, 'n_est...         -57.063635   \n",
       "\n",
       "    split1_test_score  ...  mean_test_score  std_test_score  rank_test_score  \\\n",
       "0          -61.925325  ...       -64.591439        4.938621               16   \n",
       "1          -53.931616  ...       -54.469162        4.250817                8   \n",
       "2          -51.350730  ...       -51.769020        4.367150                4   \n",
       "3          -64.676193  ...       -61.459386        4.788523               12   \n",
       "4          -53.130618  ...       -52.307234        3.729391                7   \n",
       "5          -50.618008  ...       -50.570247        4.014606                3   \n",
       "6          -59.638982  ...       -62.271191        5.014532               13   \n",
       "7          -50.550370  ...       -52.234556        4.145782                6   \n",
       "8          -49.507589  ...       -49.626778        3.942805                2   \n",
       "9          -62.310348  ...       -62.855017        1.807688               14   \n",
       "10         -52.232381  ...       -52.147030        3.289619                5   \n",
       "11         -50.799952  ...       -49.469688        3.985339                1   \n",
       "12         -65.008838  ...       -68.877325        4.659150               18   \n",
       "13         -58.083963  ...       -59.577485        4.571009               11   \n",
       "14         -64.628239  ...       -68.252471        4.493192               17   \n",
       "15         -57.167415  ...       -59.233846        4.797443               10   \n",
       "16         -61.488910  ...       -63.849162        4.752765               15   \n",
       "17         -55.452088  ...       -57.788628        4.537113                9   \n",
       "\n",
       "    split0_train_score  split1_train_score  split2_train_score  \\\n",
       "0           -16.112197       -1.573969e+01          -15.683269   \n",
       "1            -9.582158       -9.436900e+00           -9.642764   \n",
       "2            -8.184792       -8.121551e+00           -7.932202   \n",
       "3           -15.605128       -1.526859e+01          -14.994499   \n",
       "4            -9.384528       -9.341680e+00           -9.346586   \n",
       "5            -8.035242       -7.922867e+00           -7.851383   \n",
       "6           -15.800679       -1.529293e+01          -15.109767   \n",
       "7            -9.433408       -9.171720e+00           -9.295552   \n",
       "8            -7.900144       -7.737399e+00           -7.749293   \n",
       "9           -15.674019       -1.575001e+01          -15.499068   \n",
       "10           -9.541928       -9.352010e+00           -9.280289   \n",
       "11           -7.840402       -7.774480e+00           -7.756918   \n",
       "12           -0.000045       -3.869713e-30           -0.002062   \n",
       "13           -0.000068       -1.135753e-03           -0.000307   \n",
       "14           -0.001561       -5.916729e-03           -0.032137   \n",
       "15           -0.000820       -5.325056e-04           -0.003110   \n",
       "16           -0.008565       -2.827833e-03           -0.052008   \n",
       "17           -0.000771       -4.730818e-04           -0.006368   \n",
       "\n",
       "    split3_train_score  split4_train_score  mean_train_score  std_train_score  \n",
       "0           -14.991755       -1.456658e+01        -15.418697         0.558992  \n",
       "1            -9.323335       -8.900726e+00         -9.377177         0.263069  \n",
       "2            -7.732169       -7.471536e+00         -7.888450         0.261653  \n",
       "3           -15.234713       -1.384313e+01        -14.989212         0.605178  \n",
       "4            -9.115358       -8.569308e+00         -9.151492         0.306197  \n",
       "5            -7.715690       -7.196294e+00         -7.744295         0.292960  \n",
       "6           -15.005266       -1.402079e+01        -15.045887         0.580911  \n",
       "7            -9.146613       -8.721510e+00         -9.153761         0.238965  \n",
       "8            -7.552211       -7.079237e+00         -7.603657         0.284487  \n",
       "9           -15.552530       -1.472422e+01        -15.439969         0.368609  \n",
       "10           -8.913370       -8.690893e+00         -9.155698         0.309193  \n",
       "11           -7.383469       -7.097833e+00         -7.570620         0.285518  \n",
       "12           -0.000434       -9.147747e-03         -0.002338         0.003487  \n",
       "13           -0.000262       -8.232973e-04         -0.000519         0.000397  \n",
       "14           -0.001189       -4.065320e-30         -0.008161         0.012154  \n",
       "15           -0.000671       -1.417250e-04         -0.001055         0.001052  \n",
       "16           -0.001630       -4.065320e-30         -0.013006         0.019713  \n",
       "17           -0.000147       -3.045990e-04         -0.001613         0.002387  \n",
       "\n",
       "[18 rows x 23 columns]"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(grid_search.cv_results_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "WrnoeqULtmmt"
   },
   "source": [
    "## Randomized Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {
    "id": "5vJULxbotmmt",
    "outputId": "753cebd6-d5eb-454b-eab7-7985805c20fe"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
       "                   param_distributions={'max_features': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7fdcb40d49a0>,\n",
       "                                        'n_estimators': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7fdcb40ab1c0>},\n",
       "                   random_state=42, scoring='neg_mean_squared_error')"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from scipy.stats import randint\n",
    "\n",
    "param_distribs = {\n",
    "        'n_estimators': randint(low=1, high=200),\n",
    "        'max_features': randint(low=1, high=8),\n",
    "    }\n",
    "\n",
    "forest_reg = RandomForestRegressor(random_state=42)\n",
    "rnd_search = RandomizedSearchCV(forest_reg, param_distributions=param_distribs,\n",
    "                                n_iter=10, cv=5, scoring='neg_mean_squared_error', random_state=42)\n",
    "rnd_search.fit(health_prepared, health_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "id": "7nhs3AE0tmmv",
    "outputId": "91183158-025a-4676-ac20-5f62d62e63e3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6.965891328813631 {'max_features': 7, 'n_estimators': 180}\n",
      "7.162918695378983 {'max_features': 5, 'n_estimators': 15}\n",
      "7.069838770612359 {'max_features': 3, 'n_estimators': 72}\n",
      "7.118418447309243 {'max_features': 5, 'n_estimators': 21}\n",
      "6.976206359586452 {'max_features': 7, 'n_estimators': 122}\n",
      "7.070510855378248 {'max_features': 3, 'n_estimators': 75}\n",
      "7.0729721306841755 {'max_features': 3, 'n_estimators': 88}\n",
      "7.007308665371197 {'max_features': 5, 'n_estimators': 100}\n",
      "7.072843401131487 {'max_features': 3, 'n_estimators': 150}\n",
      "8.272716235184085 {'max_features': 5, 'n_estimators': 2}\n"
     ]
    }
   ],
   "source": [
    "cvres = rnd_search.cv_results_\n",
    "for mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n",
    "    print(np.sqrt(-mean_score), params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "VRcHmg7btmmw"
   },
   "source": [
    "## Analyze the Best Models and Their Errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {
    "id": "a_E0Ykpptmmw",
    "outputId": "e9880423-9aac-449c-9cf6-a9d56907c6fb"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.33296851, 0.0159857 , 0.0037552 , 0.00318823, 0.33015611,\n",
       "       0.00741696, 0.00053154, 0.00830643, 0.01507546, 0.01471534,\n",
       "       0.0329106 , 0.0227703 , 0.01222971, 0.0013496 , 0.01696697,\n",
       "       0.00899822, 0.05369521, 0.01460481, 0.01696911, 0.01279667,\n",
       "       0.01749202, 0.02687997, 0.01190218, 0.00034179, 0.00880342,\n",
       "       0.00490428, 0.00428566])"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_importances = grid_search.best_estimator_.feature_importances_\n",
    "feature_importances"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "id": "iVaLmW-qtmmx",
    "outputId": "4bd10993-74ed-4b3f-c86a-5654e95c29ac"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.33296851309425085, 'age'),\n",
       " (0.33015611239301973, 'avg_glucose_level'),\n",
       " (0.01598569676467416, 'hypertension'),\n",
       " (0.015075456895536724, 'Female'),\n",
       " (0.01471533658782216, 'Male'),\n",
       " (0.008306434795963357, 'hypertension_and_stroke'),\n",
       " (0.00741696286908687, 'heart_disease_and_stroke'),\n",
       " (0.003755197562063766, 'heart_disease'),\n",
       " (0.003188230081870429, 'stroke'),\n",
       " (0.0005315438066660933, 'heart_disease_and_hypertension')]"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "extra_attribs = [\"heart_disease_and_stroke\",\"heart_disease_and_hypertension\",\"hypertension_and_stroke\"]\n",
    "#cat_encoder = cat_pipeline.named_steps[\"cat_encoder\"] # old solution\n",
    "cat_encoder = full_pipeline.named_transformers_[\"cat\"]\n",
    "cat_one_hot_attribs = list(cat_encoder.categories_[0])\n",
    "attributes = num_attribs + extra_attribs + cat_one_hot_attribs\n",
    "sorted(zip(feature_importances, attributes), reverse=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5ac7F3q1tmmx"
   },
   "source": [
    "## Evaluate Your System on the Test Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "id": "pK-7Dofktmmx"
   },
   "outputs": [],
   "source": [
    "final_model = grid_search.best_estimator_\n",
    "\n",
    "X_test = strat_test_set.drop(\"bmi\", axis=1)\n",
    "y_test = strat_test_set[\"bmi\"].copy()\n",
    "\n",
    "X_test_prepared = full_pipeline.transform(X_test)\n",
    "final_predictions = final_model.predict(X_test_prepared)\n",
    "\n",
    "final_mse = mean_squared_error(y_test, final_predictions)\n",
    "final_rmse = np.sqrt(final_mse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "id": "iO6D6Zfltmmx",
    "outputId": "32c78b9a-0f2a-4ca7-d0d9-878e5791e39a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.544924100425049"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_rmse"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ULZBQw_ltmmy"
   },
   "source": [
    "We can compute a 95% confidence interval for the test RMSE:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "id": "Ph28DZ86tmmy",
    "outputId": "68f0ea11-64a8-4f2f-f6b0-d88cff3af334"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6.68524847, 8.31620179])"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy import stats\n",
    "\n",
    "confidence = 0.95\n",
    "squared_errors = (final_predictions - y_test) ** 2\n",
    "np.sqrt(stats.t.interval(confidence, len(squared_errors) - 1,\n",
    "                         loc=squared_errors.mean(),\n",
    "                         scale=stats.sem(squared_errors)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "fIOoK2_Ptmmz"
   },
   "source": [
    "We could compute the interval manually like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {
    "id": "2aJAmxSytmmz",
    "outputId": "9f878441-1969-4f60-8050-a7e864162644"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6.685248472602038, 8.316201790596574)"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m = len(squared_errors)\n",
    "mean = squared_errors.mean()\n",
    "tscore = stats.t.ppf((1 + confidence) / 2, df=m - 1)\n",
    "tmargin = tscore * squared_errors.std(ddof=1) / np.sqrt(m)\n",
    "np.sqrt(mean - tmargin), np.sqrt(mean + tmargin)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "HOW1hNcXtmm1"
   },
   "source": [
    "Alternatively, we could use a z-scores rather than t-scores:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {
    "id": "5ooOW7JKtmm2",
    "outputId": "c55e65c2-550c-40ab-a8cd-07bd0fd5f86f"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6.686377224650575, 8.315294280542549)"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "zscore = stats.norm.ppf((1 + confidence) / 2)\n",
    "zmargin = zscore * squared_errors.std(ddof=1) / np.sqrt(m)\n",
    "np.sqrt(mean - zmargin), np.sqrt(mean + zmargin)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jwbRIE1Utmm2"
   },
   "source": [
    "# Extra material"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "NfpZ2466tmm3"
   },
   "source": [
    "## A full pipeline with both preparation and prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {
    "id": "xg8Gn2dBtmm3",
    "outputId": "dbb2939a-8ccf-4713-e96f-b119d3205100"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([28.37295194, 29.5279221 , 33.58951957, 30.90703545, 29.69098418])"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_pipeline_with_predictor = Pipeline([\n",
    "        (\"preparation\", full_pipeline),\n",
    "        (\"linear\", LinearRegression())\n",
    "    ])\n",
    "\n",
    "full_pipeline_with_predictor.fit(health, health_labels)\n",
    "full_pipeline_with_predictor.predict(some_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5FqQbTUitmm3"
   },
   "source": [
    "## Model persistence using joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {
    "id": "jaFhi37ttmm4"
   },
   "outputs": [],
   "source": [
    "my_model = full_pipeline_with_predictor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "id": "s6z9dTOjtmm4"
   },
   "outputs": [],
   "source": [
    "import joblib\n",
    "joblib.dump(my_model, \"my_model.pkl\") # DIFF\n",
    "#...\n",
    "my_model_loaded = joblib.load(\"my_model.pkl\") # DIFF"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OhUPPMiftmm4"
   },
   "source": [
    "## Example SciPy distributions for `RandomizedSearchCV`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "id": "5Ca563w1tmm4",
    "outputId": "e774dbc8-5210-46a6-fba0-2f49186c8f3d"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy.stats import geom, expon\n",
    "geom_distrib=geom(0.5).rvs(10000, random_state=42)\n",
    "expon_distrib=expon(scale=1).rvs(10000, random_state=42)\n",
    "plt.hist(geom_distrib, bins=50)\n",
    "plt.show()\n",
    "plt.hist(expon_distrib, bins=50)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## END\n",
    "\n",
    "## By Michael Church Carson (260683849)"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "name": "02_end_to_end_machine_learning_project.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "nav_menu": {
   "height": "279px",
   "width": "309px"
  },
  "toc": {
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": "block",
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
